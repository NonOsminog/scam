import asyncio
import sqlite3
import json
from environs import Env
from PIL import Image, ImageFont, ImageDraw
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, message, ContentType
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
import scenes
import functions
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

env = Env()
env.read_env()

NAME_TEAM = env.str('NAME_TEAM')
TOKEN_WORKER = env.str('TOKEN_WORKER')
BD_PATH = env.str('BD_PATH')
WORK_STATUS = env.str('WORK_STATUS')

USERNAME_WORKER_BOT = env.str('USERNAME_WORKER_BOT')

PATHS = env.str('PATHS')

TOKEN_TRADING = env.str('TOKEN_TRADING')
TOKEN_CASINO = env.str('TOKEN_CASINO')
PAGE_SIZE = 5

bot = Bot(TOKEN_WORKER, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Questionnaire(StatesGroup):
    time = State()
    exp = State()

class setMinDeposit(StatesGroup):
    setMessage_trading = State()
    setMessage_casino = State()

class changeQiwi(StatesGroup):
    ChangeQiwiTrading = State()
    ChangeQiwiCasino = State()

class newsletter(StatesGroup):
    message_newsletter = State()

class mamont_action(StatesGroup):
    changeBalance = State()

class Menu(StatesGroup):
    step = State()

print(f"{NAME_TEAM} | Worker: –í–æ—Ä–∫–µ—Ä –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!")

@dp.message_handler(content_types=[ContentType.NEW_CHAT_MEMBERS])
async def new_members_handler(message: types.Message):
    new_member = message.new_chat_members[0]
    await bot.send_message(message.chat.id, f"üëã <b>–ü—Ä–∏–≤–µ—Ç</b>, <a href='tg://user?id={new_member.id}'>{new_member.first_name} {new_member.last_name}</a> \n\n"
                                          f"ü§ñ <a href='https://t.me/{USERNAME_WORKER_BOT}'>–ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã</a> \n"
                                          f"üìù <a href='{env.str('LINK_MANUAL')}'>–ú–∞–Ω—É–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã</a> \n"
                                          f"üí∏ <a href='{env.str('LINK_WITHDRAWS')}'>–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç</a> \n\n"
                                          f"‚ùóÔ∏è–û—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–º–æ—Ç—Ä–∏ –≤ –∑–∞–∫—Ä–µ–ø–µ.")

@dp.message_handler(chat_type=['supergroup', 'group'], commands="work")
async def work(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        information = cursor.execute(f'SELECT * FROM information WHERE id = 1').fetchone()
    if int(information[2]) == 0 or int(information[3]) == 0:
        medium_profits = 0
    else:
        medium_profits = (int(information[3]) / int(information[2]))
    await message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ <b>{NAME_TEAM}</b> \n\n"
                         f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{information[2]}</b> —à—Ç. \n"
                         f"‚ôªÔ∏è –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{information[3]} ‚ÇΩ</b> \n"
                         f"‚îî  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{medium_profits} ‚ÇΩ</b> \n\n"
                         f"üè¥‚Äç‚ò†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {await functions.workStatus(WORK_STATUS)}")

@dp.message_handler(chat_type=['supergroup', 'group'], commands="me")
async def work(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()

    if profile[5] != 0:
        sum_profits = f'<i>–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {profile[5]} ‚ÇΩ</i>'
    else:
        sum_profits = f'<i>–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: –£ —Ç–µ–±—è –Ω–æ–ª—å –ø—Ä–æ—Ñ–∏—Ç–æ–≤</i>'

    if profile[5] == 0:
        count_profits = f'<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: –£ —Ç–µ–±—è –Ω–æ–ª—å –ø—Ä–æ—Ñ–∏—Ç–æ–≤</i>'
    else:
        with sqlite3.connect(BD_PATH) as cursor:
            worker_count = cursor.execute(f"SELECT COUNT(id) FROM profits WHERE worker = ?", (message.from_user.id,)).fetchone()
        count_profits = f'<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {worker_count[0]}</i>'


    if profile[5] >= 50000 and profile[5] < 100000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 1 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 100000 and profile[5] < 200000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 2 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 200000 and profile[5] < 350000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 3 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 350000 and profile[5] < 600000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 4 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 600000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 5 WHERE id = ?', (message.from_user.id,))

    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()

    status = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    status = await functions.getStatus(profile[4])
    current_date = datetime.now()
    days_passed = (current_date.date() - datetime.strptime(profile[7], "%d-%m-%Y").date()).days

    await message.answer_photo(open(f"{PATHS}/Worker/logo.jpg", 'rb'), f"üí∏ {sum_profits} \n"
                                                                       f"üí∏ {count_profits} \n\n"
                                                                       f"üë®‚Äçüíª <i>–°—Ç–∞—Ç—É—Å: {status}</i> \n"
                                                                       f"üóì <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–∏–ºe: {days_passed}</i> \n\n")


@dp.message_handler(chat_type=['supergroup', 'group'], commands="top")
async def top(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        workers_top = cursor.execute(f"SELECT worker, SUM(amount) as 'count' FROM profits GROUP BY worker ORDER BY SUM(amount) DESC").fetchall()
        profits_all = cursor.execute(f"SELECT SUM(amount) FROM profits").fetchone()
    i = 1
    msg = '–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è! \n'
    for worker_top in workers_top:

        with sqlite3.connect(BD_PATH) as cursor:
            worker_count = cursor.execute(f"SELECT COUNT(id) FROM profits WHERE worker = ?", (worker_top[0],)).fetchone()

        if i >= 10:
            return

        if i == 1:
            smile = 'ü•á'
        elif i == 2:
            smile = 'ü•à'
        elif i == 3:
            smile = 'ü•â'
        else:
            smile = '‚óæÔ∏è'

        with sqlite3.connect(BD_PATH) as cursor:
            worker = cursor.execute(f"SELECT username, anonim FROM worker WHERE id = ?", (worker_top[0],)).fetchone()
        if (worker[1] != 1):
            username = f"<a href='tg://user?id={worker_top[0]}'>{worker[0][1:]}</a>"
        else:
            username = '–ê–Ω–æ–Ω–∏–º'
        msg += f"\n{smile} <b><u>{username}</u></b> : <b><i>{worker_top[1]}</i></b> ‚ÇΩ - <b><i>{worker_count[0]}</i></b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤"
        i = i+1
    msg += f"\n\n‚ôªÔ∏è –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {profits_all[0]} ‚ÇΩ"
    await message.answer(msg)

@dp.message_handler(chat_type=['supergroup', 'group'], commands="topd")
async def top(message: types.Message):
    current_time = datetime.now()
    with sqlite3.connect(BD_PATH) as cursor:
        workers_top = cursor.execute(f"SELECT worker, SUM(amount) as 'count' FROM profits WHERE date = ? GROUP BY worker ORDER BY SUM(amount) DESC", (current_time.strftime("%Y-%m-%d"),)).fetchall()
    i = 1
    msg = '–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å! \n'
    for worker_top in workers_top:
        if i >= 10:
            return

        with sqlite3.connect(BD_PATH) as cursor:
            worker_count = cursor.execute(f"SELECT COUNT(id) FROM profits WHERE worker = ? AND date = ?", (worker_top[0],current_time.strftime("%Y-%m-%d"),)).fetchone()

        if i == 1:
            smile = 'ü•á'
        elif i == 2:
            smile = 'ü•à'
        elif i == 3:
            smile = 'ü•â'
        else:
            smile = '‚óæÔ∏è'

        with sqlite3.connect(BD_PATH) as cursor:
            worker = cursor.execute(f"SELECT username, anonim FROM worker WHERE id = ?", (worker_top[0],)).fetchone()
        if (worker[1] != 1):
            username = f"<a href='tg://user?id={worker_top[0]}'>{worker[0][1:]}</a>"
        else:
            username = '–ê–Ω–æ–Ω–∏–º'

        msg += f"\n{smile} <b><u>{username}</u></b> : <b><i>{worker_top[1]}</i></b> ‚ÇΩ - <b><i>{worker_count[0]}</i></b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤"
        i = i+1 
    await message.answer(msg)

@dp.message_handler(chat_type=['supergroup', 'group'], commands="topm")
async def top(message: types.Message):
    current_time = datetime.now()
    back_time = datetime.now() - relativedelta(months=1)
    with sqlite3.connect(BD_PATH) as cursor:
        workers_top = cursor.execute(f"SELECT worker, SUM(amount) as 'count' FROM profits WHERE date BETWEEN ? AND ? GROUP BY worker ORDER BY SUM(amount) DESC", (back_time.strftime("%Y-%m-%d"), current_time.strftime("%Y-%m-%d"),)).fetchall()
    i = 1
    msg = '–¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü! \n'
    for worker_top in workers_top:
        if i >= 10:
            return

        with sqlite3.connect(BD_PATH) as cursor:
            worker_count = cursor.execute(f"SELECT COUNT(id) FROM profits WHERE worker = ? AND date BETWEEN ? AND ?", (worker_top[0], back_time.strftime("%Y-%m-%d"), current_time.strftime("%Y-%m-%d"),)).fetchone()

        if i == 1:
            smile = 'ü•á'
        elif i == 2:
            smile = 'ü•à'
        elif i == 3:
            smile = 'ü•â'
        else:
            smile = '‚óæÔ∏è'

        with sqlite3.connect(BD_PATH) as cursor:
            worker = cursor.execute(f"SELECT username, anonim FROM worker WHERE id = ?", (worker_top[0],)).fetchone()
        if (worker[1] != 1):
            username = f"<a href='tg://user?id={worker_top[0]}'>{worker[0][1:]}</a>"
        else:
            username = '–ê–Ω–æ–Ω–∏–º'
        msg += f"\n{smile} <b><u>{username}</u></b> : <b><i>{worker_top[1]}</i></b> ‚ÇΩ - <b><i>{worker_count[0]}</i></b> –ø—Ä–æ—Ñ–∏—Ç–æ–≤"
        i = i+1 
    await message.answer(msg)

@dp.message_handler(chat_type=['supergroup', 'group'], commands="rangs")
async def work(message: types.Message):
    await message.answer(f"<b>–°–∏—Å—Ç–µ–º–∞ –†–∞–Ω–≥–æ–≤ {NAME_TEAM}!</b> \n\n"
                         f"‚ùóÔ∏è–†–∞–Ω–≥ –≤—ã–¥–∞–µ—Ç—Å—è –∑–∞ –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤ \n"
                         f"‚ùóÔ∏è–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–≥–∞ –≤—ã–¥–∞–µ—Ç—Å—è —Ä–æ–ª—å –≤ —á–∞—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–Ω–≥–æ–º \n"
                         f"‚ùóÔ∏è–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–≥–∞ –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø—Ä–∏—è—Ç–Ω—ã–µ –ø–ª—é—à–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ - https://—Å—Å—ã–ª–∫–∞—Ç–µ–ª–µ–≥—Ä–∞–º–º \n\n"
                         f"5Ô∏è‚É£ –Æ–Ω–≥–∞ - 50 000‚ÇΩ \n\n"
                         f"4Ô∏è‚É£ –ú–∞—Ç—Ä–æ—Å - 100 000‚ÇΩ \n\n"
                         f"ü•â–ö–æ—Ä—Å–∞—Ä - 200 000‚ÇΩ \n\n"
                         f"ü•à–®—Ç—É—Ä–º–∞–Ω - 350 000‚ÇΩ \n\n"
                         f"ü•á–ö–∞–ø–∏—Ç–∞–Ω - 600 000‚ÇΩ")

@dp.message_handler(chat_type=['supergroup', 'group'], commands="fake")
async def fake(message: types.Message):
        partion = message.text.partition(' ')[2]
        text = partion.split(' ')[1] + ' ‚ÇΩ'
        qiwi = Image.open(f"{PATHS}/Worker/drawing/images/qiwi_balance.png")
        fnt = ImageFont.truetype(f"{PATHS}/Worker/drawing/fonts/Roboto-Bold.ttf", 100)
        timefnt = ImageFont.truetype(f"{PATHS}/Worker/drawing/fonts/SFUIText-BoldG1.otf", 45)
        w, h = fnt.getsize(text)
        d = ImageDraw.Draw(qiwi)
        d.text(((1080 - w) / 2, 266), text, font=fnt, fill=(255, 255, 255, 255))
        d.text((114, 42), partion.split(' ')[0], font=timefnt, fill=(0, 0, 0, 255))
        qiwi.save(f"{PATHS}/Worker/drawing/cache/{message.from_user.id}.png", "PNG")
        await message.answer_photo(open(f"{PATHS}/Worker/drawing/cache/{message.from_user.id}.png", 'rb'), f"–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å–æ–º: \n–í—Ä–µ–º—è: <b>{partion.split(' ')[0]}</b> \n–°—É–º–º–∞: <b>{text}</b>")

@dp.message_handler(chat_type='supergroup', commands="mute", is_chat_admin=True)
async def mute(message: types.Message):
    if not message.reply_to_message:
        await message.reply("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –º—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>")
        return
    try:
        muteint = int(message.text.split()[1])
        mutetype = message.text.split()[2]
        comment = " ".join(message.text.split()[3:])
    except IndexError:
        await message.reply(f"‚ùå <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–µ! \n"
                            f"–ü—Ä–∏–º–µ—Ä:"
                            f"<b>`/mute 1 —á –ø—Ä–∏—á–∏–Ω–∞`</b>")
        return
    if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å" or mutetype == "—á–∞—Å–∞":
        datetimes = datetime.now() + timedelta(hours=muteint)
        timestamp = datetimes.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
        await message.reply(f"<b>–ë—ã–ª –≤—ã–¥–∞–Ω –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b>\n"
                            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º—É –≤—ã–¥–∞–Ω –º—É—Ç:</b> <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>\n"
                            f"<b>–ù–∞–∫–∞–∑–∞–Ω–∏–µ:</b> {muteint} {mutetype}\n"
                            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}")
    elif mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç–∞" or mutetype == "–º–∏–Ω—É—Ç—ã":
        datetimes = datetime.now() + timedelta(minutes=muteint)
        timestamp = datetimes.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
        await message.reply(f"<b>–ë—ã–ª –≤—ã–¥–∞–Ω –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b>\n"
                            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º—É –≤—ã–¥–∞–Ω –º—É—Ç:</b> <a href='tg://user?id={message.reply_to_message.from_user.id}''>{message.reply_to_message.from_user.full_name}</a>\n"
                            f"<b>–ù–∞–∫–∞–∑–∞–Ω–∏–µ:</b> {muteint} {mutetype}\n"
                            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}")
    elif mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å" or mutetype == "–¥–Ω—è":
        datetimes = datetime.now() + timedelta(days=muteint)
        timestamp = datetimes.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
        await message.reply(f"<b>–ë—ã–ª –≤—ã–¥–∞–Ω –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b>\n"
                            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º—É –≤—ã–¥–∞–Ω –º—É—Ç:</b> <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>\n"
                            f"<b>–ù–∞–∫–∞–∑–∞–Ω–∏–µ:</b> {muteint} {mutetype}\n"
                            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}")

@dp.message_handler(chat_type='supergroup', commands="unmute", is_chat_admin=True)
async def unmute(message: types.Message):
    if not message.reply_to_message:
        await message.reply("‚ùå <b>–ö–æ–º–∞–Ω–¥–∞ –º—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>")
        return
    else:
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True))
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω")

@dp.message_handler(chat_type='private', commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    try:
        with sqlite3.connect(BD_PATH) as cursor:
            questionnaire = cursor.execute("SELECT id FROM worker WHERE id = ?", (message.from_user.id,)).fetchone()
        if questionnaire is None:
            await message.answer(f"–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç <b>{NAME_TEAM}</b>! \n\n"
                                 f"‚ò†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: \n"
                                 f"‚Ä¢ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ</b> \n"
                                 f"‚Ä¢ <b>–ó–∞–ø—Ä–µ—â–µ–Ω: —Å–ø–∞–º/—Ñ–ª—É–¥/—à–æ–∫/–ø–æ—Ä–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç</b> \n"
                                 f"‚Ä¢ <b>–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ –∫–∞–∫–∏—Ö –ª–∏–±–æ —É—Å–ª—É–≥/—Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>. \n"
                                 f"‚Ä¢ <b>–ó–∞ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ –±–µ–∑ –Ω–∞—à–µ–≥–æ –≤–µ–¥–æ–º–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ù–ï –ù–ï–°–Å–ú</b> \n"
                                 f"‚Ä¢ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b> \n"
                                 f"‚Ä¢ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ - —Ä–æ—Ñ–ª–∏—Ç—å –Ω–∞–¥ –≤—Å–µ–º–∏, –Ω–µ –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã)</b> \n"
                                 f"‚Ä¢ <b>–õ–æ–∫–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –¢–°–∞</b>. \n"
                                 f"–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!", reply_markup=scenes.agree)
        else:
            admins = []
            for admin in env.list('ADMIN_ID'):
                admins.append(int(admin))
            if message.from_user.id in admins:
                await message.answer("–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É!", reply_markup=scenes.main_admin)
            else:
                await message.answer("–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É!", reply_markup=scenes.main)
                
    except:
        print(f"{NAME_TEAM} | Worker: –£ –í–æ—Ä–∫–µ—Ä –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞! –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"{NAME_TEAM} | Worker: {message.from_user.username} | {message.from_user.id} - {message.text}")
 
@dp.callback_query_handler(text='rules')
async def questionnaire(call: CallbackQuery):
    await call.answer("–ù–µ–±–æ–ª—å—à–∞—è –∞–Ω–∫–µ—Ç–∞")
    await call.message.answer("‚è≥–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å —Ç—ã –≥–æ—Ç–æ–≤ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?")
    await Questionnaire.time.set()

@dp.message_handler(state=Questionnaire.time)
async def answer_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("üè¥‚Äç‚ò†Ô∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ Trade/Casino/NFT —Å–∫–∞–º–∞?")
    await Questionnaire.next()

@dp.message_handler(state=Questionnaire.exp)
async def answer_time(message: types.Message, state: FSMContext):
    await state.update_data(exp=message.text)
    data = await state.get_data()
    username = message.from_user.first_name
    if message.from_user.username:
        username = f"@{message.from_user.username}"
    ADMIN_ID = env.list('ADMIN_ID')
    for admin in ADMIN_ID:
        await bot.send_message(admin, f"<b>–ó–∞—è–≤–∫–∞ {username}</b> \n"
                                      f"Telegram ID: <b>{message.from_user.id}</b>\n"
                                      f"‚Ä¢ –í—Ä–µ–º—è: <b>{data.get('time')}</b>\n"
                                      f"‚Ä¢ –û–ø—ã—Ç: <b>{data.get('exp')}</b>",reply_markup=scenes.admin_solution(username, message.from_user.id))
    await message.answer("–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç!")
    await state.finish()

@dp.callback_query_handler(scenes.UserInfoCallback.filter(status = 'Accept'))
async def accept_form(call: CallbackQuery, callback_data: dict):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute('SELECT * FROM worker WHERE id = ?', (callback_data.get('user_id'),)).fetchone()
    if user is None:
        current_time = datetime.now()
        await call.bot.edit_message_text(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É {callback_data.get('username')}", call.message.chat.id, call.message.message_id)
        await call.bot.send_message(callback_data.get("user_id"), f'‚úÖ–¢—ã –ø—Ä–∏–Ω—è—Ç –≤ {NAME_TEAM}!' ,reply_markup=scenes.links)
        await call.bot.send_message(callback_data.get("user_id"), '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ', reply_markup=scenes.main)
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('INSERT INTO worker VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (callback_data.get('user_id'), callback_data.get('username'), await functions.getNumberRand(), 1000, 0, 0, None, current_time.strftime("%d-%m-%Y"), 1000, 0, 0))
    else:
        await call.bot.edit_message_text(f"–ó–∞—è–≤–∫–∞ {callback_data.get('username')} –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", call.message.chat.id, call.message.message_id)

@dp.callback_query_handler(scenes.UserInfoCallback.filter(status = 'Decline'))
async def decline_form(call: CallbackQuery, callback_data: dict):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute('SELECT * FROM worker WHERE id = ?', (callback_data.get('user_id'),)).fetchone()
    if user is None:
        await call.bot.edit_message_text(f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ {callback_data.get('username')}", call.message.chat.id, call.message.message_id)
        await call.bot.send_message(callback_data.get("user_id"), "‚ùå –¢–≤–æ—é –∑–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏.")
    else:
        await call.bot.edit_message_text(f"–ó–∞—è–≤–∫–∞ {callback_data.get('username')} –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", call.message.chat.id, call.message.message_id)

@dp.message_handler(chat_type='private', content_types=['text'], text='üíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()

    if profile[5] != 0:
        sum_profits = f'<i>–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {profile[5]} ‚ÇΩ</i>'
    else:
        sum_profits = f'<i>–°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: –£ —Ç–µ–±—è –Ω–æ–ª—å –ø—Ä–æ—Ñ–∏—Ç–æ–≤</i>'

    if profile[5] == 0:
        count_profits = f'<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: –£ —Ç–µ–±—è –Ω–æ–ª—å –ø—Ä–æ—Ñ–∏—Ç–æ–≤</i>'
    else:
        with sqlite3.connect(BD_PATH) as cursor:
            worker_count = cursor.execute(f"SELECT COUNT(id) FROM profits WHERE worker = ?", (message.from_user.id,)).fetchone()
        count_profits = f'<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {worker_count[0]}</i>'

    if profile[5] < 50000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 0 WHERE id = ?', (message.from_user.id,)) 
    elif profile[5] >= 50000 and profile[5] < 100000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 1 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 100000 and profile[5] < 200000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 2 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 200000 and profile[5] < 350000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 3 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 350000 and profile[5] < 600000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 4 WHERE id = ?', (message.from_user.id,))
    elif profile[5] >= 600000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 5 WHERE id = ?', (message.from_user.id,))

    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()

    status = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    status = await functions.getStatus(profile[4])
    current_date = datetime.now()
    days_passed = (current_date.date() - datetime.strptime(profile[7], "%d-%m-%Y").date()).days

    if profile[10] == 0:
        change_anonim = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="‚öôÔ∏è C–∫—Ä—ã—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data=f"change_anonim,{profile[0]},hide")
                ]
            ]
        )
    else:
        change_anonim = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data=f"change_anonim,{profile[0]},show")
                ]
            ]
        )

    await message.answer_photo(open(f"{PATHS}/Worker/logo.jpg", 'rb'), f"üîí <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {profile[6]}</b> \n\n"
                                                                       f"üí∏ {sum_profits} \n"
                                                                       f"üí∏ {count_profits} \n\n"
                                                                       f"üë®‚Äçüíª <i>–°—Ç–∞—Ç—É—Å: {status}</i> \n"
                                                                       f"üóì <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–∏–ºe: {days_passed}</i> \n\n"
                                                                       f"üè¥‚Äç‚ò†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{await functions.workStatus(WORK_STATUS)}</b>", reply_markup=change_anonim)

@dp.callback_query_handler(text_startswith='change_anonim')
async def changeAnonim(call: CallbackQuery):
    id,types = call.data.split(',')[1],call.data.split(',')[2]

    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {call.from_user.id}').fetchone()

    if profile[5] != 0:
        count_profits = f'<i>–ü—Ä–æ—Ñ–∏—Ç–æ–≤: {profile[5]} ‚ÇΩ</i>'
    else:
        count_profits = f'<i>–£ —Ç–µ–±—è –Ω–æ–ª—å –ø—Ä–æ—Ñ–∏—Ç–æ–≤</i>'

    if profile[5] >= 50000 and profile[5] < 100000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 1 WHERE id = ?', (call.from_user.id,))
    elif profile[5] >= 100000 and profile[5] < 200000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 2 WHERE id = ?', (call.from_user.id,))
    elif profile[5] >= 200000 and profile[5] < 350000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 3 WHERE id = ?', (call.from_user.id,))
    elif profile[5] >= 350000 and profile[5] < 600000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 4 WHERE id = ?', (call.from_user.id,))
    elif profile[5] >= 600000:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET status = 5 WHERE id = ?', (call.from_user.id,))

    status = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    status = await functions.getStatus(profile[4])
    current_date = datetime.now()
    days_passed = (current_date.date() - datetime.strptime(profile[7], "%d-%m-%Y").date()).days

    if types == 'show':
        change_anonim = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="‚öôÔ∏è C–∫—Ä—ã—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data=f"change_anonim,{profile[0]},hide")
                ]
            ]
        )

        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET anonim = 0 WHERE id = ?', (call.from_user.id,))
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

        await call.message.answer_photo(open(f"{PATHS}/Worker/logo.jpg", 'rb'), f"üîí <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {profile[6]}</b> \n\n"
                                                                       f"üí∏ {count_profits} \n\n"
                                                                       f"üë®‚Äçüíª <i>–°—Ç–∞—Ç—É—Å: {status}</i> \n"
                                                                       f"üóì <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–∏–ºe: {days_passed}</i> \n\n"
                                                                       f"üè¥‚Äç‚ò†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{await functions.workStatus(WORK_STATUS)}</b>", reply_markup=change_anonim)
    if types == 'hide':
        change_anonim = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data=f"change_anonim,{profile[0]},show")
                ]
            ]
        )

        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute(f'UPDATE worker SET anonim = 1 WHERE id = ?', (call.from_user.id,))
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

        await call.message.answer_photo(open(f"{PATHS}/Worker/logo.jpg", 'rb'), f"üîí <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {profile[6]}</b> \n\n"
                                                                       f"üí∏ {count_profits} \n\n"
                                                                       f"üë®‚Äçüíª <i>–°—Ç–∞—Ç—É—Å: {status}</i> \n"
                                                                       f"üóì <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–∏–ºe: {days_passed}</i> \n\n"
                                                                       f"üè¥‚Äç‚ò†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{await functions.workStatus(WORK_STATUS)}</b>", reply_markup=change_anonim)

@dp.callback_query_handler(text='setMinDeposit_trading')
async def setDeposit(call: CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∏–Ω–∏–º–∞–ª–∫—É")
    await setMinDeposit.setMessage_trading.set()

@dp.message_handler(state=setMinDeposit.setMessage_trading)
async def setMinDep(message: types.Message, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()
    await state.update_data(curDep=profile[3])
    await state.update_data(minDep=message.text)
    data = await state.get_data()
    minDep = data.get('minDep')
    curDep = data.get('curDep')
    if not minDep.isnumeric():
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
    elif minDep.isnumeric():
        MIN_DEPOSIT = int(env.int('MIN_DEPOSIT'))
        MAX_DEPOSIT = int(env.int('MAX_DEPOSIT'))
        if int(minDep) < MIN_DEPOSIT:
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª–∫—É –º–µ–Ω—å—à–µ, —á–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è!")
            await setMinDeposit.setMessage_trading.set()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∏–Ω–∏–º–∞–ª–∫—É")
        elif int(minDep) > MAX_DEPOSIT:
            await message.answer(f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –º–∏–Ω–∏–º–∞–ª–∫–∞! \n"
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è - <b>{MAX_DEPOSIT}</b>")
            await setMinDeposit.setMessage_trading.set()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∏–Ω–∏–º–∞–ª–∫—É")
        elif int(minDep) % 10 != 0:
            await message.answer(f"{minDep} - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ \n"
                                 f"1000, 1100, 1200 - –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        elif int(minDep) >= MIN_DEPOSIT and int(minDep) <= MAX_DEPOSIT:
            await message.answer(f"–¢–≤–æ—è –º–∏–Ω–∏–º–∞–ª–∫–∞: {curDep}\n"
                                 f"–ù–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª–∫–∞: {minDep}")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute('UPDATE worker SET min_deposit_trading = ? WHERE id = ?',(minDep, message.from_user.id,))
            await state.finish()

@dp.callback_query_handler(text='setMinDeposit_casino')
async def setDeposit(call: CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∏–Ω–∏–º–∞–ª–∫—É")
    await setMinDeposit.setMessage_casino.set()

@dp.message_handler(state=setMinDeposit.setMessage_casino)
async def setMinDep(message: types.Message, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()
    await state.update_data(curDep=profile[8])
    await state.update_data(minDep=message.text)
    data = await state.get_data()
    minDep = data.get('minDep')
    curDep = data.get('curDep')
    if not minDep.isnumeric():
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
    elif minDep.isnumeric():
        MIN_DEPOSIT = int(env.int('MIN_DEPOSIT'))
        MAX_DEPOSIT = int(env.int('MAX_DEPOSIT'))
        if int(minDep) < MIN_DEPOSIT:
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª–∫—É –º–µ–Ω—å—à–µ, —á–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è!")
            await setMinDeposit.setMessage_casino.set()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∏–Ω–∏–º–∞–ª–∫—É")
        elif int(minDep) > MAX_DEPOSIT:
            await message.answer(f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –º–∏–Ω–∏–º–∞–ª–∫–∞! \n"
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è - <b>{MAX_DEPOSIT}</b>")
            await setMinDeposit.setMessage_casino.set()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∏–Ω–∏–º–∞–ª–∫—É")
        elif int(minDep) % 10 != 0:
            await message.answer(f"{minDep} - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ \n"
                                 f"1000, 1100, 1200 - –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        elif int(minDep) >= MIN_DEPOSIT and int(minDep) <= MAX_DEPOSIT:
            await message.answer(f"–¢–≤–æ—è –º–∏–Ω–∏–º–∞–ª–∫–∞: {curDep}\n"
                                 f"–ù–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª–∫–∞: {minDep}")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute('UPDATE worker SET min_deposit_casino = ? WHERE id = ?',(minDep, message.from_user.id,))
            await state.finish()

@dp.message_handler(chat_type='private', content_types=['text'], text='üìà –¢—Ä–µ–π–¥–∏–Ω–≥')
async def profile(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()
    USERNAME_TRADING_BOT = env.str('USERNAME_TRADING_BOT')
    await message.answer(f"üìã –¢–≤–æ–π –∫–æ–¥: <code>{profile[6]}</code> \n\n"
                         f"üìû –¢–≤–æ–π –Ω–æ–º–µ—Ä: <code>+{profile[2]}</code> \n"
                         f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{USERNAME_TRADING_BOT}?start={profile[6]} \n"
                         f"‚õì C–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: <a href='https://t.me/{USERNAME_TRADING_BOT}?start={profile[6]}'>@{USERNAME_TRADING_BOT}</a>", reply_markup=scenes.trading_users)

@dp.message_handler(chat_type='private', content_types=['text'], text='üé∞ –ö–∞–∑–∏–Ω–æ')
async def profile(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM worker WHERE id = {message.from_user.id}').fetchone()
    USERNAME_CASINO_BOT = env.str('USERNAME_CASINO_BOT')
    await message.answer(f"üìã –¢–≤–æ–π –∫–æ–¥: <code>{profile[6]}</code> \n\n"
                         f"üìû –¢–≤–æ–π –Ω–æ–º–µ—Ä: <code>+{profile[2]}</code> \n"
                         f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{USERNAME_CASINO_BOT}?start={profile[6]} \n"
                         f"‚õì C–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: <a href='https://t.me/{USERNAME_CASINO_BOT}?start={profile[6]}'>@{USERNAME_CASINO_BOT}</a>", reply_markup=scenes.casino_users)

@dp.message_handler(chat_type='private', content_types=['text'], text='üóÉ –û –ø—Ä–æ–µ–∫—Ç–µ')
async def profile(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        information = cursor.execute(f'SELECT * FROM information WHERE id = 1').fetchone()
    if int(information[2]) == 0 or int(information[3]) == 0:
        medium_profits = 0
    else:
        medium_profits = (int(information[3]) / int(information[2]))
    await message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ <b>{NAME_TEAM}</b> \n\n"
                         f"üèÅ –ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å: {information[1]} \n"
                         f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{information[2]}</b> —à—Ç. \n"
                         f"‚ôªÔ∏è –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{information[3]} ‚ÇΩ</b> \n"
                         f"‚îî  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{medium_profits} ‚ÇΩ</b> \n\n"
                         f"üîπ –ü—Ä–æ—Ü–µ–Ω—Ç—ã: \n"
                         f"‚îú –ü–ª–∞—Ç—ë–∂ X1 - 80% \n"
                         f"‚îú –ü–ª–∞—Ç—ë–∂ X2/X3/X4/–¢–ü - 70% \n"
                         f"‚îî –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–ª–∞—Ç—ë–∂: 50% \n\n"
                         f"üè¥‚Äç‚ò†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{await functions.workStatus(WORK_STATUS)}</b>", reply_markup=scenes.links)

@dp.message_handler(chat_type='private', content_types=['text'], text='üíª –ê–¥–º–∏–Ω-–º–µ–Ω—é')
async def admin_menu(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        information = cursor.execute(f'SELECT * FROM information WHERE id = 1').fetchone()
    if int(information[2]) == 0 or int(information[3]) == 0:
        medium_profits = 0
    else:
        medium_profits = (int(information[3]) / int(information[2]))
    await message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ <b>{NAME_TEAM}</b> \n\n"
                         f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{information[2]}</b> —à—Ç. \n"
                         f"‚ôªÔ∏è –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{information[3]} ‚ÇΩ</b> \n"
                         f"‚îî  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{medium_profits} ‚ÇΩ</b> \n\n"
                         f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: \n"
                         f"{await functions.workStatus(WORK_STATUS)}", reply_markup=scenes.admin_menu)

@dp.callback_query_handler(text='change_qiwi')
async def change_qiwi(call: CallbackQuery):
    await call.message.answer(f"üïπ –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã QIWI —Ç–æ–∫–µ–Ω–∞.", reply_markup=scenes.changeQiwiBot)

@dp.callback_query_handler(text='change_qiwi_trading')
async def change_qiwi_trading(call: CallbackQuery):
    await call.message.answer(f"üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–º–µ–Ω—ã –∫–∏–≤–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è, (<b>–Ω–æ–º–µ—Ä –±–µ–∑ –ø–ª—é—Å–∞;—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á p2p qiwi;–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á p2p qiwi</b>) –ø—Ä–∏–º–µ—Ä: \n\n"
                              f"79645219503;eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Ijd1NjJjcS0=;48e7qUxn9T1ryYe1MvZSwx1frsbe6iycj2gcrwWg4dGG1crasNTx1gbpiMsyXQFNKQhvukniQG8RTVhYm3iP6fEKBt", reply_markup=scenes.cancel)
    await changeQiwi.ChangeQiwiTrading.set()

@dp.message_handler(state=changeQiwi.ChangeQiwiTrading)
async def ChangeQiwiTrading(message: types.Message, state: FSMContext):
    await state.update_data(qiwi=message.text)
    data = await state.get_data()
    qiwi = data.get('qiwi')
    if qiwi.count(';') == 2:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('UPDATE qiwi SET phone = ?, p2p_secret_key = ?, api_token = ? WHERE bot = "trading"',(qiwi.split(';')[0], qiwi.split(';')[1], qiwi.split(';')[2],))
        await message.answer(f"‚úÖ <b>–ö–∏–≤–∏ –∞–ø–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TRADING –±–æ—Ç–∞ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
        await state.finish()
    else:
        await message.answer(f"üö´ <b>–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∏–≤–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑, –ø—Ä–∏–º–µ—Ä</b>: \n\n"
                             f"79645219503;eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Ijd1NjJjcS0=;48e7qUxn9T1ryYe1MvZSwx1frsbe6iycj2gcrwWg4dGG1crasNTx1gbpiMsyXQFNKQhvukniQG8RTVhYm3iP6fEKBt", reply_markup=scenes.cancel)

@dp.callback_query_handler(text='change_qiwi_casino')
async def change_qiwi_trading(call: CallbackQuery):
    await call.message.answer(f"üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–º–µ–Ω—ã –∫–∏–≤–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è, (<b>–Ω–æ–º–µ—Ä –±–µ–∑ –ø–ª—é—Å–∞;—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á p2p qiwi;–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á p2p qiwi</b>) –ø—Ä–∏–º–µ—Ä: \n\n"
                              f"79645219503;eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Ijd1NjJjcS0=;48e7qUxn9T1ryYe1MvZSwx1frsbe6iycj2gcrwWg4dGG1crasNTx1gbpiMsyXQFNKQhvukniQG8RTVhYm3iP6fEKBt", reply_markup=scenes.cancel)
    await changeQiwi.ChangeQiwiCasino.set()

@dp.message_handler(state=changeQiwi.ChangeQiwiCasino)
async def ChangeQiwiTrading(message: types.Message, state: FSMContext):
    await state.update_data(qiwi=message.text)
    data = await state.get_data()
    qiwi = data.get('qiwi')
    if qiwi.count(';') == 2:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('UPDATE qiwi SET phone = ?, p2p_secret_key = ?, api_token = ? WHERE bot = "casino"',(qiwi.split(';')[0], qiwi.split(';')[1], qiwi.split(';')[2],))
        await message.answer(f"‚úÖ <b>–ö–∏–≤–∏ –∞–ø–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è TRADING –±–æ—Ç–∞ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
        await state.finish()
    else:
        await message.answer(f"üö´ <b>–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∏–≤–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑, –ø—Ä–∏–º–µ—Ä</b>: \n\n"
                             f"79645219503;eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Ijd1NjJjcS0=;48e7qUxn9T1ryYe1MvZSwx1frsbe6iycj2gcrwWg4dGG1crasNTx1gbpiMsyXQFNKQhvukniQG8RTVhYm3iP6fEKBt", reply_markup=scenes.cancel)

@dp.callback_query_handler(text='newsletter')
async def Newsletter(call: CallbackQuery):
    await call.message.answer(f"üì® <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>:", reply_markup=scenes.cancel)
    await newsletter.message_newsletter.set()

@dp.message_handler(state=newsletter.message_newsletter)
async def messageFrom_newsletter(message: types.Message, state: FSMContext):
    await state.update_data(message_newsletter=message.text)
    data = await state.get_data()
    message_newsletter = data.get('message_newsletter')
    with sqlite3.connect(BD_PATH) as cursor:
        workers = cursor.execute("SELECT * FROM worker").fetchall()
        count_workers = cursor.execute("SELECT COUNT(id) FROM worker",).fetchone()
    await message.answer(f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–Ω–∞..!</b>\n\n"
                         f"üìã –í–æ—Ä–∫–µ—Ä–æ–≤: <b>{count_workers[0]}</b>")
    await state.finish()
    for id in workers:
        try:
            await bot.send_message(id[0], message_newsletter)
        except:
            print(f"{NAME_TEAM} | Worker: {id[0]} - {message_newsletter} - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")

@dp.callback_query_handler(text_startswith="withdraw_balance") 
async def check_pay(call:types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'casino':
        casino_bot = Bot(TOKEN_CASINO, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
        await casino_bot.send_message(id, 'üí∞–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ãüí∞')
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id, f"–í—ã –≤—ã–≤–µ–ª–∏ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞.")
    elif type == 'trading':
        trading_bot = Bot(TOKEN_TRADING, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
        await trading_bot.send_message(id, 'üí∞–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ãüí∞')
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id, f"–í—ã –≤—ã–≤–µ–ª–∏ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞.")

@dp.callback_query_handler(text_startswith="no_withdraw_balance") 
async def check_pay(call:types.CallbackQuery):
    id,balance,type = call.data.split(",")[1],call.data.split(",")[2],call.data.split(",")[3]
    if type == 'casino':
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?", (bal,id,)) 
        casino_bot = Bot(TOKEN_CASINO, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await casinobot.send_message(id, 'üö´–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω:\nüëÆ‚Äç‚ôÇ –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –ø–æ–ø–æ–ª–Ω—è–ª–∏üëÆ‚Äç‚ôÇ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É') 
        await bot.send_message(call.from_user.id,f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞ {id}')
    elif type == 'trading':
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute("UPDATE users_trading SET balance = balance + ? WHERE id = ?", (balance, id,)) 
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        trading_bot = Bot(TOKEN_TRADING, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
        await trading_bot.send_message(id, f"üö´–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤") 
        await bot.send_message(call.from_user.id, f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞")

async def answer_with_menu(call: types.CallbackQuery, state: FSMContext, menu_page_shift: int):

    async with state.proxy() as data:
        with sqlite3.connect(BD_PATH) as cursor:
            worker = cursor.execute("SELECT * FROM worker WHERE id = ?", (call.from_user.id,)).fetchone()
            if data['bot'] == 'trading':
                res = cursor.execute("SELECT * FROM users_trading WHERE worker = ?", (worker[6],)).fetchall()
            else:
                res = cursor.execute("SELECT * FROM users_casino WHERE worker = ?", (worker[6],)).fetchall()
        current_page_index = data['user']
        new_page_index = current_page_index + menu_page_shift
        if (new_page_index < 0 or new_page_index > len(res)/PAGE_SIZE):
            new_page_index = current_page_index
        data['user'] = new_page_index

    the_keyboard = InlineKeyboardMarkup()
    index = new_page_index * PAGE_SIZE
    for text in res[index:index + PAGE_SIZE]:
        button = InlineKeyboardButton(text=f"{text[3]} / {text[0]}", callback_data=f"{data['bot']}_the_step,{text[0]}")
        the_keyboard.add(button)
    next = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_step')
    back = InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='next_step')
    stop = InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data='stop')
    the_keyboard.row(next, back).add(stop)

    await call.message.answer('–ú–µ–Ω—é', reply_markup=the_keyboard)


@dp.callback_query_handler(text='list_users_trading')
async def enter_mamonts(call: types.CallbackQuery, state: FSMContext):
    await Menu.step.set()
    async with state.proxy() as data:
        data['user'] = 0
        data['bot'] = 'trading'
    await answer_with_menu(call, state, 0)

@dp.callback_query_handler(text='list_users_casino')
async def enter_mamonts(call: types.CallbackQuery, state: FSMContext):
    await Menu.step.set()
    async with state.proxy() as data:
        data['user'] = 0
        data['bot'] = 'casino'
    await answer_with_menu(call, state, 0)

@dp.callback_query_handler(text='next_step', state=Menu.step)
async def next_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await answer_with_menu(call, state, +1)


@dp.callback_query_handler(text='back_step', state=Menu.step)
async def back_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await answer_with_menu(call, state, -1)


@dp.callback_query_handler(text='stop', state=Menu.step)
async def newk_sui3(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–ü–æ–¥–±–æ—Ä –∑–∞–∫–æ–Ω—á–µ–Ω')
    await state.finish()

@dp.callback_query_handler(text_startswith="trading_the_step", state=Menu.step)
async def the_step(call: types.CallbackQuery, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (call.data.split(',')[1],)).fetchone()
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()

    change_mamont = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},trading"),
                InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},trading") #,{user[0]},{user[4]},trading,{call.message.message_id}
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},trading")
            ]
        ]
    )

    if user[4] == 2:
        status = "‚úÖ–§–£–õ–õ –í–ò–ù"
    elif user[4] == 1:
        status = "üåê50 / 50"
    elif user[4] == 0:
        status = "‚ùå–§–£–õ–õ –õ–£–ó"

    await call.message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                              f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                              f"<b>- TG_ID:</b> {user[0]} \n\n"
                              f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                              f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)

    await state.finish()

@dp.callback_query_handler(text_startswith="casino_the_step", state=Menu.step)
async def the_step(call: types.CallbackQuery, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT * FROM users_casino WHERE id = ?", (call.data.split(',')[1],)).fetchone()
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()

    change_mamont = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},casino"),
                InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},casino") #,{user[0]},{user[4]},trading,{call.message.message_id}
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},casino")
            ]
        ]
    )

    if user[4] == 2:
        status = "‚úÖ–§–£–õ–õ –í–ò–ù"
    elif user[4] == 1:
        status = "üåê50 / 50"
    elif user[4] == 0:
        status = "‚ùå–§–£–õ–õ –õ–£–ó"

    await call.message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                              f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                              f"<b>- TG_ID:</b> {user[0]} \n\n"
                              f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                              f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)

    await state.finish()

@dp.callback_query_handler(text_startswith="change_lucky_btn")
async def change_lucky(call: types.CallbackQuery, state: FSMContext):
    user_id,bot = call.data.split(',')[1],call.data.split(',')[2]
    lucky = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ–§–£–õ–õ –í–ò–ù", callback_data=f"change_lucky,{user_id},2,{bot}"),
                InlineKeyboardButton(text="‚ùå–§–£–õ–õ –õ–£–ó", callback_data=f"change_lucky,{user_id},0,{bot}"),
                InlineKeyboardButton(text="üåê50 / 50", callback_data=f"change_lucky,{user_id},1,{bot}")
            ]
        ]
    )
    await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–∞—á—É!", reply_markup=lucky)

@dp.callback_query_handler(text_startswith="change_lucky")
async def change_lucky(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_change=call.data.split(',')[1], lucky=call.data.split(',')[2], bot=call.data.split(',')[3])
    data = await state.get_data()

    id_change = data.get('id_change')
    lucky = data.get('lucky')
    bot = data.get('bot')

    if bot == 'trading':
        if int(lucky) == 0:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_trading SET lucky = ? WHERE id = ?", (0, id_change,))
        elif int(lucky) == 1:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_trading SET lucky = ? WHERE id = ?", (1, id_change,))
        elif int(lucky) == 2:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_trading SET lucky = ? WHERE id = ?", (2, id_change,))
        with sqlite3.connect(BD_PATH) as cursor:
            user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (id_change,)).fetchone()
            worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()

        if user[4] == 2:
            status = "‚úÖ–§–£–õ–õ –í–ò–ù"
        elif user[4] == 1:
            status = "üåê50 / 50"
        elif user[4] == 0:
            status = "‚ùå–§–£–õ–õ –õ–£–ó"

        change_mamont = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},{bot}"),
                    InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},{bot}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},{bot}")
                ]
            ]
        )

        await call.message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                                  f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                                  f"<b>- TG_ID:</b> {user[0]} \n\n"
                                  f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                                  f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)
    elif bot == 'casino':
        if int(lucky) == 0:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET lucky = ? WHERE id = ?", (0, id_change,))
        elif int(lucky) == 1:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET lucky = ? WHERE id = ?", (1, id_change,))
        elif int(lucky) == 2:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET lucky = ? WHERE id = ?", (2, id_change,))
        with sqlite3.connect(BD_PATH) as cursor:
            user = cursor.execute("SELECT * FROM users_casino WHERE id = ?", (id_change,)).fetchone()
            worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()

        if user[4] == 2:
            status = "‚úÖ–§–£–õ–õ –í–ò–ù"
        elif user[4] == 1:
            status = "üåê50 / 50"
        elif user[4] == 0:
            status = "‚ùå–§–£–õ–õ –õ–£–ó"

        change_mamont = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},{bot}"),
                    InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},{bot}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},{bot}")
                ]
            ]
        )

        await call.message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                                  f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                                  f"<b>- TG_ID:</b> {user[0]} \n\n"
                                  f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                                  f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)

@dp.callback_query_handler(text_startswith="change_balance")
async def change_balance(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_change=call.data.split(',')[1], bot=call.data.split(',')[2])
    await call.message.answer(f"–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å?")
    await mamont_action.changeBalance.set()

@dp.message_handler(state=mamont_action.changeBalance)
async def changeBalanceMamont(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)
    data = await state.get_data()

    amount = data.get('amount')
    id_change = data.get('id_change')
    bot = data.get('bot')

    if amount.isnumeric():
        if bot == 'trading':
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute('UPDATE users_trading SET balance = balance + ? WHERE id = ?',(amount, id_change,))
                user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (id_change,)).fetchone()
                worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()
            trading_bot = Bot(TOKEN_TRADING, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
            await trading_bot.send_message(id_change, f"–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!") 

            change_mamont = InlineKeyboardMarkup(
                inline_keyboard = [
                    [
                        InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},{bot}"),
                        InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},{bot}")
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},{bot}")
                    ]
                ]
            )

            if user[4] == 2:
                status = "‚úÖ–§–£–õ–õ –í–ò–ù"
            elif user[4] == 1:
                status = "üåê50 / 50"
            elif user[4] == 0:
                status = "‚ùå–§–£–õ–õ –õ–£–ó"

            await message.answer(f"–ë–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω!")
            await message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                                      f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                                      f"<b>- TG_ID:</b> {user[0]} \n\n"
                                      f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                                      f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)
        elif bot == 'casino':
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute('UPDATE users_casino SET balance = balance + ? WHERE id = ?',(amount, id_change,))
                user = cursor.execute("SELECT * FROM users_casino WHERE id = ?", (id_change,)).fetchone()
                worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()
            casino_bot = Bot(TOKEN_CASINO, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
            await casino_bot.send_message(id_change, f"–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!") 

            change_mamont = InlineKeyboardMarkup(
                inline_keyboard = [
                    [
                        InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},{bot}"),
                        InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},{bot}")
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},{bot}")
                    ]
                ]
            )

            if user[4] == 2:
                status = "‚úÖ–§–£–õ–õ –í–ò–ù"
            elif user[4] == 1:
                status = "üåê50 / 50"
            elif user[4] == 0:
                status = "‚ùå–§–£–õ–õ –õ–£–ó"

            await message.answer(f"–ë–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω!")
            await message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                                      f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                                      f"<b>- TG_ID:</b> {user[0]} \n\n"
                                      f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                                      f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)

        await state.finish()
    else:
        await message.answer(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!")

@dp.callback_query_handler(text_startswith="cancel_mamont")
async def change_lucky(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(id_change=call.data.split(',')[1], bot=call.data.split(',')[2])
    data = await state.get_data()

    id_change = data.get('id_change')
    bot = data.get('bot')

    if bot == 'trading':
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('UPDATE users_trading SET ban = ?, worker = ? WHERE id = ?',(1, 0, id_change,))
            user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (id_change,)).fetchone()
            worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()
        change_mamont = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},{bot}"),
                    InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},{bot}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},{bot}")
                ]
            ]
        )

        if user[4] == 2:
            status = "‚úÖ–§–£–õ–õ –í–ò–ù"
        elif user[4] == 1:
            status = "üåê50 / 50"
        elif user[4] == 0:
            status = "‚ùå–§–£–õ–õ –õ–£–ó"

        await call.message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                                  f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                                  f"<b>- TG_ID:</b> {user[0]} \n\n"
                                  f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                                  f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)
    if bot == 'casino':
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('UPDATE users_casino SET ban = ?, worker = ? WHERE id = ?',(1, 0, id_change,))
            user = cursor.execute("SELECT * FROM users_casino WHERE id = ?", (id_change,)).fetchone()
            worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()
        change_mamont = InlineKeyboardMarkup(
            inline_keyboard = [
                [
                    InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"change_balance,{user[0]},{bot}"),
                    InlineKeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä—ã—à–∞", callback_data=f"change_lucky_btn,{user[0]},{bot}")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–≤—è–∑–∞—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data=f"cancel_mamont,{user[0]},{bot}")
                ]
            ]
        )

        if user[4] == 2:
            status = "‚úÖ–§–£–õ–õ –í–ò–ù"
        elif user[4] == 1:
            status = "üåê50 / 50"
        elif user[4] == 0:
            status = "‚ùå–§–£–õ–õ –õ–£–ó"

        await call.message.answer(f"<b>ü¶£ –ú–∞–º–æ–Ω—Ç:</b> <a href='tg://user?id={user[0]}'>{user[3]}</a> \n"
                                  f"<b>‚ò†Ô∏è –í–æ—Ä–∫–µ—Ä:</b> {worker[1]} \n\n"
                                  f"<b>- TG_ID:</b> {user[0]} \n\n"
                                  f"<b>- –ë–∞–ª–∞–Ω—Å:</b> {user[2]} ‚ÇΩ\n"
                                  f"<b>- –°—Ç–∞—Ç—É—Å:</b> {status}", reply_markup=change_mamont)

@dp.message_handler(chat_type=['supergroup', 'group'], commands="help")
async def help(message: types.Message):
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n\n"
                        f"/top - —Ç–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è \n"
                        f"/topm - —Ç–æ–ø –∑–∞ –º–µ—Å—è—Ü \n"
                        f"/topd - —Ç–æ–ø –∑–∞ –¥–µ–Ω—å \n\n" 
                        f"/rangs - –†–∞–Ω–≥–∏ {NAME_TEAM} \n"
                        f"/me - –ò–Ω—Ñ–æ –æ —Å–µ–±–µ \n"
                        f"/work - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ \n"
                        f"/fake - –ª—é–±–æ–π –ë–∞–ª–∞–Ω—Å QIWI (–ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–∞–∫ /fake –≤—Ä–µ–º—è —Å—É–º–º–∞) \n"
                        f"/mute - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ê–¥–º–∏–Ω–æ–≤ \n"
                        f"/unmute - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ê–¥–º–∏–Ω–æ–≤")

@dp.callback_query_handler(text_startswith="casino_accept")
async def casino_accept(call: types.CallbackQuery):
    comment,id,amount = call.data.split(",")[1],call.data.split(",")[2],call.data.split(",")[3]
    with sqlite3.connect(BD_PATH) as cursor:
        cursor.execute("UPDATE qiwi_pays SET status = 1 WHERE comment = ?", (comment,))
        cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?", (amount, id,))
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")

@dp.callback_query_handler(text_startswith="trading_accept")
async def trading_accept(call: types.CallbackQuery):
    comment,id,amount = call.data.split(",")[1],call.data.split(",")[2],call.data.split(",")[3]
    with sqlite3.connect(BD_PATH) as cursor:
        cursor.execute("UPDATE qiwi_pays SET status = 1 WHERE comment = ?", (comment,))
        cursor.execute("UPDATE users_trading SET balance = balance + ? WHERE id = ?", (amount, id,))
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")

# @dp.callback_query_handler(text_startswith="check_PayQiwi") 
# async def check_pay(call:types.CallbackQuery):
#     id,price,bot,comment = call.data.split(",")[1], call.data.split(",")[2], call.data.split(",")[3],call.data.split(",")[4]
#     with sqlite3.connect(bd) as c:
#         c.execute(f"UPDATE pays SET status = '1' WHERE comment = {comment}")
#     await call.message.edit_text('–ì–æ—Ç–æ–≤–æ')
#     if bot == 'trading':
#         with sqlite3.connect(bd) as c:
#             c.execute("UPDATE users_trading SET balance = balance + ? WHERE id = ?", (price,id,))
#         await call.message.edit_text('–ì–æ—Ç–æ–≤–æ')

@dp.callback_query_handler(text="cancel", state="*")
async def cancel_btn(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=scenes.main_admin)

# start bot
if __name__ == '__main__':
    executor.start_polling(dp)
