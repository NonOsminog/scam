import asyncio
import sqlite3
import json
import random
import requests
from environs import Env
from pyqiwip2p import QiwiP2P
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, message
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
import scenes
import functions
from datetime import datetime

env = Env()
env.read_env()

NAME_TEAM = env.str('NAME_TEAM')
NAME_CASINO = env.str('NAME_CASINO')
TOKEN_CASINO = env.str('TOKEN_CASINO')
TOKEN_WORKER = env.str('TOKEN_WORKER')

PATHS = env.str('PATHS')
BD_PATH = env.str('BD_PATH')

LOGS_CHANNEL_ID = env.str('LOGS_CHANNEL_ID')
LOGS_CHAT_ID = env.str('LOGS_CHAT_ID')
USERNAME_CASINO_BOT = env.str('USERNAME_CASINO_BOT')

bot = Bot(TOKEN_CASINO, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
worker_bot = Bot(TOKEN_WORKER, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class enterCode(StatesGroup):
    ref_code = State()

class Deposit(StatesGroup):
    enter_amount = State()

class Withdraw(StatesGroup):
    q1 = State()

class RandomNumber(StatesGroup):
    q1 = State()

class Coin(StatesGroup):
    q1 = State()

class Dice(StatesGroup):
    q1 = State()

print(f"{NAME_TEAM} | Casino: –ö–∞–∑–∏–Ω–æ –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!")

@dp.message_handler(chat_type='private', commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    try:
        referal_code = message.get_args()
        with sqlite3.connect(BD_PATH) as cursor:
            user = cursor.execute("SELECT * FROM users_casino WHERE id = ?", (message.from_user.id,)).fetchone()
        if user is None:
            with sqlite3.connect(BD_PATH) as cursor:
                worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (referal_code,)).fetchone()
            if worker is None:
                await message.answer(f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞")
                await enterCode.ref_code.set()
            else:
                await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º", reply_markup=scenes.main)
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute('INSERT INTO users_casino VALUES (?, ?, ?, ?, ?, ?)', (message.from_user.id, referal_code, 0, message.from_user.first_name, 1, 0))
                await worker_bot.send_message(worker[0], f"@{message.from_user.username} - —Ç–≤–æ–π –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Çü¶£")
        else:
            if user[5] == 1:
                return
            await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º", reply_markup=scenes.main)
    except Exception as e:
        print(e)
        print(f"{NAME_TEAM} | Casino: –£ –ö–∞–∑–∏–Ω–æ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞! –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"{NAME_TEAM} | Casino: {message.from_user.username} | {message.from_user.id} - {message.text}")

@dp.message_handler(state=enterCode.ref_code)
async def answer_code(message: types.Message, state: FSMContext):
    await state.update_data(code=message.text)
    data = await state.get_data()
    with sqlite3.connect(BD_PATH) as cursor:
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (data.get('code'),)).fetchone()
    if worker is None:
        await message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞")
    else:
        await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º", reply_markup=scenes.main)
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('INSERT INTO users_casino VALUES (?, ?, ?, ?, ?, ?)', (message.from_user.id, data.get('code'), 0, message.from_user.first_name, 1, 0))
        await worker_bot.send_message(worker[0], f"@{message.from_user.username} - —Ç–≤–æ–π –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Çü¶£")
        await state.finish()

@dp.message_handler(chat_type='private', content_types=['text'], text='üôé‚Äç‚ôÇ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM users_casino WHERE id = {message.from_user.id}').fetchone()
    if profile[5] == 1:
        return
    profile_menu = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text='üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='deposit'),
                InlineKeyboardButton(text='üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw')
            ],
            [
                InlineKeyboardButton(text='‚§¥Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', url=f'https://t.me/share/url?url=https://t.me/{USERNAME_CASINO_BOT}?start={profile[1]}&text=–ò–≥—Ä–∞–π –≤–º–µ—Å—Ç–µ —Å üíé{NAME_CASINO}üíé –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!')
            ]
        ]
    )
    await message.answer(f"üì≤ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ \n\n"
                         f"üí∏ –ë–∞–ª–∞–Ω—Å: {profile[2]} ‚ÇΩ \n\n"
                         f"üÜî –í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: <b>{message.from_user.id}</b> \n\n"
                         f"üé≤ –ß–∏—Å–ª–æ —á–µ–ª–æ–≤–µ–∫ –æ–Ω–ª–∞–π–Ω {random.randint(6500, 9000)} üé≤", reply_markup=profile_menu)

@dp.message_handler(chat_type='private', content_types=['text'], text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {message.from_user.id}').fetchone()
    if user[5] == 1:
        return
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.", reply_markup=scenes.information)

@dp.message_handler(chat_type='private', content_types=['text'], text='üé∞ –ò–≥—Ä–∞—Ç—å')
async def games(message: types.Message):
    await message.answer(f"üíÅüèª‚Äç‚ôÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup=scenes.games)

@dp.callback_query_handler(text='random_number')
async def randomNumberGame(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if user[2] < 10:
        await call.message.answer('‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 10 ‚ÇΩ')
    else:
        await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2]}', reply_markup=scenes.cancel)
        await RandomNumber.q1.set()

@dp.message_handler(state=RandomNumber.q1)
async def random_number_sum(message: types.Message, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {message.from_user.id}').fetchone()
    try:
        if user[2] < int(message.text) or int(message.text) < 10:
            await message.answer(f'–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 10 ‚ÇΩ \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - {user[2]}')
        else:
            await message.answer('üíÅüèª‚Äç‚ôÄ –°—Ç–∞–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª', reply_markup=scenes.interval(message.text))
            await state.finish()
    except ValueError:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=scenes.main)
        await state.finish()

@dp.callback_query_handler(text_startswith="RandomNumberr")
async def process_callback_button1(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    amount,vibor = call.data.split(",")[1],call.data.split(",")[2]
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if vibor == 'biggest':
        if user[4] == 2:
            await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(51, 100)}")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
            await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
            await RandomNumber.q1.set()
        elif user[4] == 1:
            result = random.randint(1, 2)
            if result == 1:
                await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(51, 100)}")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
                await RandomNumber.q1.set()
            else:
                await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(1, 49)}")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                if user[2] <= 10:
                    await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                else:
                    await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                    await RandomNumber.q1.set()
        else:
            await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(1, 49)}")
            with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
            if user[2] <= 10:
                await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
            else:
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                await RandomNumber.q1.set()
    elif vibor == 'equals':
        if user[4] == 2:
            await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {int(amount) * 10}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ 50")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET balance = balance + ? * 10 WHERE id = ?",(amount, call.from_user.id,))
            await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount) * 10}', reply_markup=scenes.cancel)
            await RandomNumber.q1.set()
        elif user[4] == 1:
            result = random.randint(1, 2)
            if result == 1:
                await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {int(amount) * 10}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ 50")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? * 10 WHERE id = ?",(amount, call.from_user.id,))
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount) * 10}', reply_markup=scenes.cancel)
                await RandomNumber.q1.set()
            else:
                await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(1, 100)}")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                if user[2] <= 10:
                    await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                else:
                    await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                    await RandomNumber.q1.set()
        else:
            await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(1, 49)}")
            with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
            if user[2] <= 10:
                await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
            else:
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                await RandomNumber.q1.set()
    else:
        if user[4] == 2:
            await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(1, 49)}")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
            await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
            await RandomNumber.q1.set()
        elif user[4] == 1:
            result = random.randint(1, 2)
            if result == 1:
                await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(1, 49)}")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
                await RandomNumber.q1.set()
            else:
                await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(51, 100)}")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                if user[2] <= 10:
                    await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                else:
                    await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                    await RandomNumber.q1.set()
        else:
            await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ {random.randint(51, 100)}")
            with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
            if user[2] <= 10:
                await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
            else:
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                await RandomNumber.q1.set()

@dp.callback_query_handler(text="orel_reshka")
async def heads_or_tails_btn(call: types.CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if user[2] < 10:
        await call.message.answer("‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 10 ‚ÇΩ")
    else:
        await call.message.answer(f"üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2]}", reply_markup=scenes.cancel)
        await Coin.q1.set()

@dp.message_handler(state=Coin.q1)
async def heads_or_tails_sum(message: types.Message, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {message.from_user.id}').fetchone()
    try:
        if int(message.text) < 10 or int(message.text) > user[2]:
            await message.answer(f"–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 10 ‚ÇΩ\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - {user[2]} ‚ÇΩ")
        else:
            await message.answer("üíÅüèª‚Äç‚ôÄ –°—Ç–∞–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–µ",reply_markup=scenes.coin(message.text))
            await state.finish()
    except ValueError:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")
        await state.finish()

@dp.callback_query_handler(text_startswith="Coinflip")
async def heads_btn(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    amount,vibor = call.data.split(",")[1],call.data.split(",")[2]
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if vibor == 'Orel':
        if user[4] == 2:
            await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª –æ—Ä–µ–ª!")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
            await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
            await Coin.q1.set()
        elif user[4] == 1:
            result = random.randint(1, 2)
            if result == 1:
                await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª –æ—Ä–µ–ª")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
                await Coin.q1.set()

            else:
                await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                if user[2] <= 10:                 
                    await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                else:
                    await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                    await Coin.q1.set()
        else:
            await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞")
            with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
            if user[2] <= 10:
                await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
            else:
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                await Coin.q1.set()
    else:
        if user[4] == 2:
            await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞!")
            with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
            await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
            await Coin.q1.set()
        elif user[4] == 1:
            result = random.randint(1, 2)
            if result == 1:
                await call.message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞!")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(amount, call.from_user.id,))
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(amount)}', reply_markup=scenes.cancel)
                await Coin.q1.set()
            else:
                await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª –æ—Ä–µ–ª!")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
                if user[2] <= 10:
                    await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                else:
                    await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                    await Coin.q1.set()
        else:
            await call.message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {amount}\n–í—ã–ø–∞–ª –æ—Ä–µ–ª")
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(amount, call.from_user.id,))
            if user[2] <= 10:
                await call.message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
            else:
                await call.message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(amount)}', reply_markup=scenes.cancel)
                await Coin.q1.set()

@dp.callback_query_handler(text="random_dice")
async def random_dice_btn(call: types.CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if user[2] < 10:
        await call.message.answer("‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 10 ‚ÇΩ")
    else:
        await call.message.answer(f"üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2]}", reply_markup=scenes.cancel)
    await Dice.q1.set()

@dp.message_handler(state=Dice.q1)
async def random_dice_sum(message: types.Message, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {message.from_user.id}').fetchone()
    try:
        if int(message.text) < 10 or int(message.text) > user[2]:
            await message.answer(f"–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - 10 ‚ÇΩ\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ - {user[2]} ‚ÇΩ")
        else:
            await message.answer("üíÅüèª‚Äç‚ôÄ –°—Ç–∞–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞")
            one_point = "CAACAgIAAxkBAAEOWYJhkPT2ojKkslnxy1rH-8xS3rcPuAAC3MYBAAFji0YMsbUSFEouGv8iBA"
            two_point = "CAACAgIAAxkBAAEOKxRhiFE5JfReRO6gZlItEuZKcTw4FwAC3cYBAAFji0YM608pO-wjAlEiBA"
            three_point = "CAACAgIAAxkBAAEOY6BhkpmmVkdpWR2bP0bFelAmIQ5yOQAC3sYBAAFji0YMVHH9hav7ILkiBA"
            four_point = "CAACAgIAAxkBAAEOY6Jhkpm-7_ZhXS5rPlNH9N9AfTIzbgAC38YBAAFji0YMHEUTINW7YxciBA"
            five_point = "CAACAgIAAxkBAAEOY6RhkpnUEJFca6ISof5GiwtYh_O-JwAC4MYBAAFji0YMSLHz-sj_JqkiBA"
            six_point = "CAACAgIAAxkBAAEOY6Zhkpnut8ZgPcI3nPC3auNQZVYWOAAC4cYBAAFji0YM75p8zae_tHoiBA"
            if user[4] == 2:
                await bot.send_sticker(message.from_user.id, random.choice([four_point, five_point, six_point]))
                await message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                     "  üëÜ –í–∞—à –∫—É–±–∏–∫ \n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                     "  üëá –ö—É–±–∏–∫ –±–æ—Ç–∞ \n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
                await bot.send_sticker(message.from_user.id, random.choice([one_point, two_point, three_point]))
                await message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {int(message.text)} \n")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(message.text, message.from_user.id,))
                await message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(message.text)}', reply_markup=scenes.cancel)
                await Dice.q1.set()
            elif user[4] == 1:
                result = random.randint(1,2)
                if result == 1:
                    await bot.send_sticker(message.from_user.id, random.choice([four_point, five_point, six_point]))
                    await message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                         "  üëÜ –í–∞—à –∫—É–±–∏–∫ \n"
                                         "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                         "  üëá –ö—É–±–∏–∫ –±–æ—Ç–∞ \n"
                                         "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
                    await bot.send_sticker(message.from_user.id, random.choice([one_point, two_point, three_point]))
                    await message.answer(f"‚ù§ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ - –≤—ã–∏–≥—Ä—ã—à {int(message.text)} \n")
                    with sqlite3.connect(BD_PATH) as cursor:
                        cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?",(message.text, message.from_user.id,))
                    await message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] + int(message.text)}', reply_markup=scenes.cancel)
                    await Dice.q1.set()
                else:
                    await bot.send_sticker(message.from_user.id, random.choice([one_point, two_point, three_point]))
                    await message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                         "  üëÜ –í–∞—à –∫—É–±–∏–∫ \n"
                                         "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                         "  üëá –ö—É–±–∏–∫ –±–æ—Ç–∞ \n"
                                         "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
                    await bot.send_sticker(message.from_user.id, random.choice([four_point, five_point, six_point]))
                    await message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {int(message.text)} \n")
                    with sqlite3.connect(BD_PATH) as cursor:
                        cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(message.text, message.from_user.id,))
                    if user[2] <= 10:
                        await message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                        await state.finish()
                    else:
                        await message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(message.text)}', reply_markup=scenes.cancel)
                        await Dice.q1.set()
            else:
                await bot.send_sticker(message.from_user.id, random.choice([one_point, two_point, three_point]))
                await message.answer("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                     "  üëÜ –í–∞—à –∫—É–±–∏–∫ \n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n"
                                     "  üëá –ö—É–±–∏–∫ –±–æ—Ç–∞ \n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
                await bot.send_sticker(message.from_user.id, random.choice([four_point, five_point, six_point]))
                await message.answer(f"üíî –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ - –ø—Ä–æ–∏–≥—Ä—ã—à {int(message.text)} \n")
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute("UPDATE users_casino SET balance = balance - ? WHERE id = ?",(message.text, message.from_user.id,))
                if user[2] <= 10:
                    await message.answer("‚ùå‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå‚ùå", reply_markup=scenes.main)
                    await state.finish()
                else:
                    await message.answer(f'üíÅüèª‚Äç‚ôÄ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n–î–æ—Å—Ç—É–ø–Ω–æ: {user[2] - int(message.text)}', reply_markup=scenes.cancel)
                    await Dice.q1.set()
    except ValueError:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")
        await state.finish()

@dp.callback_query_handler(text='deposit')
async def deposit(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT worker,ban FROM users_casino WHERE id = ?", (call.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT id,min_deposit_casino FROM worker WHERE referal_code = ?", (user[0],)).fetchone()
    if user[1] == 1:
        return
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è \n"
                              f"<b>–°—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - {worker[1]} ‚ÇΩ</b>")
    await Deposit.enter_amount.set()

@dp.message_handler(state=Deposit.enter_amount)
async def answer_pay(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {message.from_user.id}').fetchone()
    if user[5] == 1:
        return
    selectPay = InlineKeyboardMarkup(
	    inline_keyboard = [
            [
                InlineKeyboardButton(text = 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å Qiwi/–ö–∞—Ä—Ç–æ–π', callback_data = 'selectPay_qiwi,'+message.text)
		    ]
	    ]
    )
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT worker FROM users_casino WHERE id = ?", (message.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT id,min_deposit_casino FROM worker WHERE referal_code = ?", (user[0],)).fetchone()
    if message.text.isnumeric():
        if int(message.text) < worker[1]:
            await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", reply_markup=selectPay)
    await state.finish()
                                
@dp.callback_query_handler(text_startswith='selectPay_qiwi')
async def selectPay_qiwi(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    amount = call.data.split(",")[1]
    comment = random.randint(100000, 999999)
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT worker FROM users_casino WHERE id = ?", (call.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT id,min_deposit_casino FROM worker WHERE referal_code = ?", (user[0],)).fetchone()
        qiwi = cursor.execute("SELECT * FROM qiwi WHERE bot = 'casino'",).fetchone()
        cursor.execute("INSERT INTO qiwi_pays VALUES (?, ?, ?, ?)", (call.from_user.id, USERNAME_CASINO_BOT, comment, '0',))

    p2p = QiwiP2P(auth_key=qiwi[1])
    bill = p2p.bill(bill_id=comment, amount=amount, lifetime=45, comment=comment)
    
    accept_kb = types.InlineKeyboardMarkup()
    accept_kb.add(types.InlineKeyboardButton(text = '‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f"casino_accept,{comment},{call.from_user.id},{amount}"))

    await worker_bot.send_message(worker[0], f"‚úÖ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</b> \n"
                                             f"(–ö–∞–∑–∏–Ω–æ) \n\n"
                                             f"üêò –ú–∞–º–æ–Ω—Ç: {call.from_user.full_name} [@{call.from_user.username}] \n"
                                             f"üí∏ –°—É–º–º–∞: {amount} ‚ÇΩ", reply_markup=accept_kb)

    pay_kb = types.InlineKeyboardMarkup()
    pay_kb.add(types.InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å', url=bill.pay_url))
    pay_kb.add(types.InlineKeyboardButton(text = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"check,{comment},{amount}"))
    
    await call.message.answer(f"<b>–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} ‚ÇΩ</b>", reply_markup=pay_kb)

@dp.callback_query_handler(text='license')
async def licnese(call: CallbackQuery):
    await call.message.reply_document(open(f'{PATHS}/Casino/license_fc3db67fcd.pdf', 'rb'))

@dp.callback_query_handler(text_startswith='check')
async def checkPay_qiwi(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    comment, price = call.data.split(",")[1], call.data.split(",")[2]
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT * FROM users_casino WHERE id = ?", (call.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()
        pays = cursor.execute("SELECT * FROM qiwi_pays WHERE comment = ?", (comment,)).fetchone()
        share_check = cursor.execute("SELECT * FROM qiwi_pays WHERE id = ? AND bot_username = ? AND status = 1", (call.from_user.id,USERNAME_CASINO_BOT,)).fetchone()
        qiwi = cursor.execute("SELECT p2p_secret_key FROM qiwi WHERE bot = 'casino'",).fetchone()
    share = (float(await functions.worker_sharee(share_check)) * int(price))
    check = await functions.pays(qiwi[0], comment)
    if pays[3] == 1:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?", (pays[2], call.from_user.id,))
        await call.message.edit_text(f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')
    else:
        if check:
            current_time = datetime.now()
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE worker SET profits = profits + ? WHERE referal_code = ?", (price, user[1],))
                cursor.execute("UPDATE information SET profits = profits + 1, amount_profits = amount_profits + ? WHERE id = 1", (price,))
                cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?", (price, call.from_user.id,))
                cursor.execute("UPDATE qiwi_pays SET status = ? WHERE comment = ?", ('1', comment,))
                cursor.execute('INSERT INTO profits VALUES (?, ?, ?, ?)', (call.from_user.id, worker[0], price, current_time.strftime("%Y-%m-%d")))

            if (worker[10] != 1):
                username = worker[1]
            else:
                username = '–ê–Ω–æ–Ω–∏–º'

            await worker_bot.send_message(LOGS_CHANNEL_ID, f"‚ò†Ô∏è <b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üé∞ CASINO \n\n"
                                                        f"üè¥‚Äç‚ò†Ô∏è –û–±—á–∏—Å—Ç–∏–ª –º–∞–º–æ–Ω—Ç–∞: <b>{username}</b> \n"
                                                        f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                        f"‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{share}‚ÇΩ</b>")
            await worker_bot.send_sticker(worker[0], "CAACAgIAAxkBAAEGWd9jaiqWrvCr0fgS6PJI_Y3_CS--3QACZAADDbbSGRbBZmuQEnSJKwQ")
            await worker_bot.send_sticker(LOGS_CHAT_ID, "CAACAgIAAxkBAAEGWd9jaiqWrvCr0fgS6PJI_Y3_CS--3QACZAADDbbSGRbBZmuQEnSJKwQ")
            await worker_bot.send_message(LOGS_CHAT_ID, f"‚ò†Ô∏è <b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üé∞ CASINO \n\n"
                                                        f"üè¥‚Äç‚ò†Ô∏è –û–±—á–∏—Å—Ç–∏–ª –º–∞–º–æ–Ω—Ç–∞: <b>{username}</b> \n"
                                                        f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                        f"‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{share}‚ÇΩ</b>")
            await call.message.edit_text(f'‚úÖ –£—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{price}‚ÇΩ</b>')
            ADMIN_ID = env.list('ADMIN_ID')
            for admin in ADMIN_ID:
                await worker_bot.send_message(admin, f"‚ò†Ô∏è <b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üé∞ CASINO \n\n"
                                                    f"üè¥‚Äç‚ò†Ô∏è –û–±—á–∏—Å—Ç–∏–ª –º–∞–º–æ–Ω—Ç–∞: <b>{worker[1]}</b> \n"
                                                    f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                    f"‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{share}‚ÇΩ</b>")
            try:
                await worker_bot.send_message(worker[0], f"‚ò†Ô∏è <b>–£ —Ç–µ–±—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üé∞ CASINO \n\n"
                                                        f"üè¥‚Äç‚ò†Ô∏è –ú–∞–º–æ–Ω—Ç: <b><a href='tg://user?id={user[0]}'>{user[3]}</a></b> \n"
                                                        f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                        f"‚îî –¢–≤–æ—è –¥–æ–ª—è: <b>{share}‚ÇΩ</b>")
            except Exception as e:
                print(e)
                pass
        else:
            await call.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@dp.callback_query_handler(text='withdraw')
async def withdraw(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_casino WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    if user[2] < 1000:
        await bot.send_message(call.from_user.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!")
    else:
        await bot.send_message(call.from_user.id, f"üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–µ–∑ + –≤ –Ω–∞—á–∞–ª–µ \n\n"
                                                  f"–ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞: –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. \n\n"
                                                  f"<b>–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –≤—Å—é —Å—É–º–º—É –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</b>")
        await Withdraw.q1.set()

@dp.message_handler(state=Withdraw.q1)
async def withdraw_q1(message: types.Message,state:FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f"SELECT * FROM users_casino WHERE id = {message.from_user.id}").fetchone()
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?",(user[1],)).fetchone()
    if user[5] == 1:
        return

    withdraw_form = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text="üí∏–í–´–í–ï–°–¢–òüí∏", callback_data=f"withdraw_balance,{message.from_user.id},casino"),
                InlineKeyboardButton(text="‚ùå–û–¢–ú–ï–ù–ò–¢–¨‚ùå", callback_data=f"no_withdraw_balance,{message.from_user.id},{user[2]},casino")
            ]
        ]
    )        
    if message.text.isdigit():
        if int(message.text) == worker[2]:
            await message.answer(f"üîî–í—ã <b>—É—Å–ø–µ—à–Ω–æ</b> –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤! \n"
                                 f"–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞! \n\n"
                                 f"<b>–°—É–º–º–∞:</b> {user[2]} \n"
                                 f"<b>–°—Ç–∞—Ç—É—Å:</b> –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶ \n\n"
                                 f"–ú—ã <b>—É–≤–µ–¥–æ–º–∏–º</b> –í–∞—Å, –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤!")
            await worker_bot.send_message(worker[0], f"@{message.from_user.username} —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ \n"
                                                    f"üí∏ –°—É–º–º–∞: <b>{user[2]}</b>", reply_markup=withdraw_form)
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_casino SET balance = 0 WHERE id = ?", (message.from_user.id,))
            await state.finish()
        else:
            TS_btn = InlineKeyboardMarkup(
                inline_keyboard = [
                    [
                        InlineKeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="tg://resolve?domain=RoyalCasSupps")
                    ]
                ]
            )        
            await message.answer(f"üö´ <b>–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤!</b> \n\n"
                                 f"üëÆ‚Äç‚ôÇÔ∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –ø–æ–ø–æ–ª–Ω—è–ª–∏ \n"
                                 f"‚ùóÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>", reply_markup=TS_btn)
            await worker_bot.send_message(worker[0], f"üî•–ú–∞–º–æ–Ω—Ç @{message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ {user[2]} –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞üîÅ")
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã! \n"
                             "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=scenes.main)
    await state.finish()

@dp.callback_query_handler(text="cancel", state="*")
async def cancel_btn(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=scenes.main)

# start bot
if __name__ == '__main__':
    executor.start_polling(dp)